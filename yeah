local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService") 
local UserInputService = game:GetService("UserInputService") 
local CoreGui = game:GetService("CoreGui")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")
local Lighting = game:GetService("Lighting")
local Workspace = game:GetService("Workspace")
local SoundService = game:GetService("SoundService")

local player = Players.LocalPlayer
local mouse = player:GetMouse()
local camera = Workspace.CurrentCamera

-- Theme Storage for Settings
local Theme = {
    AccentColor = Color3.fromRGB(138, 43, 226),
    BackgroundColor = Color3.fromRGB(20, 20, 20),
    SurfaceColor = Color3.fromRGB(24, 24, 24),
    BorderColor = Color3.fromRGB(56, 56, 56),
    PrimaryText = Color3.fromRGB(255, 255, 255),
    SecondaryText = Color3.fromRGB(255, 255, 255),
    ButtonColor = Color3.fromRGB(30, 30, 30),
    Font = Enum.Font.GothamSemibold,
    
    -- Customization options
    GlowColor = Color3.fromRGB(138, 43, 226),
    GlowIntensity = 0.5,
    NotificationColor = Color3.fromRGB(138, 43, 226),
    WatermarkColor = Color3.fromRGB(138, 43, 226),
    SliderFillColor = Color3.fromRGB(138, 43, 226),
    ToggleActiveColor = Color3.fromRGB(138, 43, 226),
    DropdownColor = Color3.fromRGB(30, 30, 30),
    ColorPickerBorder = Color3.fromRGB(56, 56, 56),
    CloseButtonColor = Color3.fromRGB(255, 50, 50)
}

-- Settings
local Settings = {
    ShowWatermark = false,
    ShowNotifications = false,
    GlowEnabled = true,
    UIColorerOpen = false,
    WatermarkType = "Normal",
    NotificationType = "Normal",
    
    -- Combat Settings
    Combat = {
        Enable = false,
        Hotkey = nil,
        Checks = {},
        UseSmoothness = false,
        UsePrediction = false,
        UseCustomOffset = false,
        HitPart = "Head",
        AimType = "Mouse",
        XSmoothness = 50,
        YSmoothness = 50,
        XPrediction = 25,
        YPrediction = 25,
        XOffset = 0,
        YOffset = 0,
        
        -- FOV Settings
        UseFOV = false,
        DrawFOV = false,
        FillFOV = false,
        FOVSize = 125,
        FOVOutlineColor = Color3.fromRGB(255, 255, 255),
        FOVFillColor = Color3.fromRGB(255, 255, 255),
        FOVFillTransparency = 50,
        FOVOutlineTransparency = 0,
        
        -- Silent Aim
        SilentAim = {
            Enable = false,
            Hotkey = nil,
            HitParts = {"Head"},
            HitChance = 100,
            WallCheck = false,
            TeamCheck = false,
            UseFOV = false,
            DrawFOV = false,
            FillFOV = false,
            FOVSize = 125,
            FOVOutlineColor = Color3.fromRGB(255, 255, 255),
            FOVFillColor = Color3.fromRGB(255, 255, 255),
            FOVFillTransparency = 50,
            FOVOutlineTransparency = 0
        },
        
        -- Orbit Lock
        OrbitLock = {
            Enable = false,
            Hotkey = nil,
            HitPart = "Head",
            LookAtTarget = false,
            Spectate = false,
            XOffset = 0,
            YOffset = 0,
            ResetOffset = false
        },
        
        -- Fun Features
        HitNotification = false,
        HitSound = "None",
        TargetTracer = false,
        TargetTracerColor = Color3.fromRGB(255, 0, 0),
        TargetHeadDot = false,
        TargetHeadDotColor = Color3.fromRGB(255, 0, 0),
        TargetInfoBox = false,
        TargetInfoBoxColor = Color3.fromRGB(255, 255, 255),
        TargetGlowChams = false,
        TargetGlowChamsColor = Color3.fromRGB(255, 0, 0)
    },
    
    -- Visuals Settings
    Visuals = {
        ESP = {
            Enable = false,
            BoxESP = false,
            BoxESPColor = Color3.fromRGB(255, 255, 255),
            BoxType = "Normal",
            BoxGlow = false,
            BoxGlowColor = Color3.fromRGB(255, 255, 255),
            NameESP = false,
            NameESPColor = Color3.fromRGB(255, 255, 255),
            NameOutline = false,
            NameGlow = false,
            NameGlowColor = Color3.fromRGB(255, 255, 255),
            HealthBarESP = false,
            HealthBarBGColor = Color3.fromRGB(50, 50, 50),
            HealthBarColor = Color3.fromRGB(0, 255, 0),
            HealthBarOutline = false,
            HealthBarGlow = false,
            HealthBarGlowColor = Color3.fromRGB(0, 255, 0),
            ToolESP = false,
            ToolESPColor = Color3.fromRGB(255, 255, 0),
            ToolOutline = false,
            ToolGlow = false,
            ToolGlowColor = Color3.fromRGB(255, 255, 0),
            DistanceESP = false,
            DistanceESPColor = Color3.fromRGB(255, 255, 255),
            DistanceOutline = false,
            DistanceGlow = false,
            DistanceGlowColor = Color3.fromRGB(255, 255, 255),
            ChamsESP = false,
            ChamsESPColor = Color3.fromRGB(255, 0, 0),
            ChamsGlow = false,
            ChamsGlowColor = Color3.fromRGB(255, 0, 0),
            SkeletonESP = false,
            SkeletonESPColor = Color3.fromRGB(255, 255, 255),
            SkeletonGlow = false,
            SkeletonGlowColor = Color3.fromRGB(255, 255, 255),
            GlowIntensity = 50,
            Distance = 500,
            HealthNumber = false,
            HealthNumberColor = Color3.fromRGB(255, 255, 255)
        },
        
        SelfESP = {
            Enable = false,
            BoxESP = false,
            BoxESPColor = Color3.fromRGB(255, 255, 255),
            BoxType = "Normal",
            BoxGlow = false,
            BoxGlowColor = Color3.fromRGB(255, 255, 255),
            NameESP = false,
            NameESPColor = Color3.fromRGB(255, 255, 255),
            NameOutline = false,
            NameGlow = false,
            NameGlowColor = Color3.fromRGB(255, 255, 255),
            HealthBarESP = false,
            HealthBarBGColor = Color3.fromRGB(50, 50, 50),
            HealthBarColor = Color3.fromRGB(0, 255, 0),
            HealthBarOutline = false,
            HealthBarGlow = false,
            HealthBarGlowColor = Color3.fromRGB(0, 255, 0),
            ToolESP = false,
            ToolESPColor = Color3.fromRGB(255, 255, 0),
            ToolOutline = false,
            ToolGlow = false,
            ToolGlowColor = Color3.fromRGB(255, 255, 0),
            DistanceESP = false,
            DistanceESPColor = Color3.fromRGB(255, 255, 255),
            DistanceOutline = false,
            DistanceGlow = false,
            DistanceGlowColor = Color3.fromRGB(255, 255, 255),
            ChamsESP = false,
            ChamsESPColor = Color3.fromRGB(255, 0, 0),
            ChamsGlow = false,
            ChamsGlowColor = Color3.fromRGB(255, 0, 0),
            GlowIntensity = 50,
            Distance = 500,
            HealthNumber = false,
            HealthNumberColor = Color3.fromRGB(255, 255, 255)
        },
        
        World = {
            AmbienceColor = false,
            AmbienceColorValue = Color3.fromRGB(255, 255, 255),
            AmbienceGlow = false,
            AmbienceGlowColor = Color3.fromRGB(255, 255, 255),
            BuildingColor = false,
            BuildingColorValue = Color3.fromRGB(255, 255, 255),
            BuildingGlow = false,
            BuildingGlowColor = Color3.fromRGB(255, 255, 255),
            FogColor = false,
            FogStart = 0,
            FogEnd = 100,
            FogColorValue = Color3.fromRGB(255, 255, 255),
            FogGlow = false,
            FogGlowColor = Color3.fromRGB(255, 255, 255),
            ScreenColor = false,
            ScreenColorValue = Color3.fromRGB(255, 255, 255)
        },
        
        Effects = {
            SnowFlakes = false,
            HelloKitty = false,
            SelfBulletTracer = false,
            SelfBulletTracerColor = Color3.fromRGB(255, 255, 0),
            EnemyBulletTracer = false,
            EnemyBulletTracerColor = Color3.fromRGB(255, 0, 0),
            BulletStartSize = 1,
            BulletEndSize = 1,
            BulletDuration = 1,
            HitSkeleton = false,
            HitSkeletonColor = Color3.fromRGB(255, 0, 0),
            HitSkeletonGlow = false,
            HitSkeletonGlowColor = Color3.fromRGB(255, 0, 0),
            Crosshair = false,
            CrosshairColor = Color3.fromRGB(255, 255, 255),
            CrosshairOutline = false,
            CrosshairOutlineColor = Color3.fromRGB(0, 0, 0),
            CrosshairGap = 5,
            CrosshairSize = 10,
            CrosshairSpin = false,
            CrosshairSpinSpeed = 5
        }
    },
    
    -- Misc Settings
    Misc = {
        Fly = {
            Enable = false,
            Hotkey = nil,
            Speed = 16,
            Type = "Normal"
        },
        
        Speed = {
            Enable = false,
            Hotkey = nil,
            Amount = 16,
            Type = "Legit",
            LegitSlideAmount = 10
        },
        
        AntiAim = {
            -- Add anti-aim settings here
        },
        
        Players = {
            Spectate = nil,
            Teleport = nil,
            Fling = nil
        }
    },
    
    -- Settings
    Settings = {
        UI = {
            Font = Enum.Font.GothamSemibold,
            BackgroundTransparency = 0,
            ShowWatermark = false,
            ShowNotifications = false
        },
        
        Config = {
            Current = "Default",
            List = {"Default"}
        }
    }
}

-- ESP Storage
local ESPObjects = {}
local FOVCircle = nil
local SilentFOVCircle = nil
local Crosshair = nil
local SnowFlakes = {}
local HelloKitties = {}

-- Current target
local currentTarget = nil
local lockedTarget = nil
local orbitAngle = 0

-- Utility functions
local function create(instance, properties)
    local ins = Instance.new(instance)
    for property, value in pairs(properties) do
        ins[property] = value
    end
    return ins
end

local function round(n, d)
    return tonumber(string.format("%."..(d or 0).."f", n))
end

local function toHex(color)
    return string.format("#%02X%02X%02X", color.R * 255, color.G * 255, color.B * 255)
end

local function fromHex(hex)
    local r, g, b = string.match(hex, "^#?(%w%w)(%w%w)(%w%w)$")
    if r and g and b then
        return Color3.fromRGB(tonumber(r, 16), tonumber(g, 16), tonumber(b, 16))
    end
    return Color3.fromRGB(255, 255, 255)
end

local function HSVtoRGB(h, s, v)
    local r, g, b
    local i = math.floor(h * 6)
    local f = h * 6 - i
    local p = v * (1 - s)
    local q = v * (1 - f * s)
    local t = v * (1 - (1 - f) * s)
    
    i = i % 6
    
    if i == 0 then
        r, g, b = v, t, p
    elseif i == 1 then
        r, g, b = q, v, p
    elseif i == 2 then
        r, g, b = p, v, t
    elseif i == 3 then
        r, g, b = p, q, v
    elseif i == 4 then
        r, g, b = t, p, v
    elseif i == 5 then
        r, g, b = v, p, q
    end
    
    return Color3.fromRGB(r * 255, g * 255, b * 255)
end

local function RGBtoHSV(color)
    local r, g, b = color.R, color.G, color.B
    local max = math.max(r, g, b)
    local min = math.min(r, g, b)
    local h, s, v
    
    v = max
    local d = max - min
    s = max == 0 and 0 or d / max
    
    if max == min then
        h = 0
    else
        if max == r then
            h = (g - b) / d + (g < b and 6 or 0)
        elseif max == g then
            h = (b - r) / d + 2
        elseif max == b then
            h = (r - g) / d + 4
        end
        h = h / 6
    end
    
    return h, s, v
end

-- Drag functionality
local function makeDraggable(frame, dragHandle)
    local dragging = false
    local dragInput, dragStart, startPos
    
    local function update(input)
        local delta = input.Position - dragStart
        frame:TweenPosition(
            UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y),
            Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.1, true
        )
    end
    
    dragHandle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    dragHandle.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
end

-- Create main ScreenGui
local screenGui = create("ScreenGui", {
    Name = "EnhancedPupyywareGUI",
    DisplayOrder = 9999,
    ResetOnSpawn = false,
    ZIndexBehavior = "Global",
    Parent = CoreGui
})

local glowEffect = create("ImageLabel", {
    Name = "GlowEffect",
    AnchorPoint = Vector2.new(0.5, 0.5),
    BackgroundTransparency = 1,
    Position = UDim2.new(0.5, 0, 0.5, 0),
    Size = UDim2.new(0, 900, 0, 750),
    ZIndex = -1,
    Image = "rbxassetid://5028857084",
    ImageColor3 = Theme.GlowColor,
    ImageTransparency = 1 - Theme.GlowIntensity,
    Visible = Settings.GlowEnabled,
    Parent = screenGui
})

-- Main outline frame
local outline = create("Frame", {
    AnchorPoint = Vector2.new(0.5, 0.5),
    BackgroundColor3 = Theme.AccentColor,
    BorderColor3 = Color3.fromRGB(12, 12, 12),
    BorderSizePixel = 1,
    Size = UDim2.new(0, 525, 0, 900),
    Position = UDim2.new(0.5, 0, 0.5, 0),
    ZIndex = 1,
    Parent = screenGui
})

-- Second outline (black border)
local outline2 = create("Frame", {
    AnchorPoint = Vector2.new(0.5, 0.5),
    BackgroundColor3 = Color3.fromRGB(0, 0, 0),
    BorderColor3 = Color3.fromRGB(12, 12, 12),
    BorderSizePixel = 1,
    Size = UDim2.new(1, -4, 1, -4),
    Position = UDim2.new(0.5, 0, 0.5, 0),
    Parent = outline
})

-- Inner frame
local indent = create("Frame", {
    AnchorPoint = Vector2.new(0.5, 0.5),
    BackgroundColor3 = Theme.BackgroundColor,
    BorderColor3 = Theme.BorderColor,
    BorderMode = "Inset",
    BorderSizePixel = 1,
    Size = UDim2.new(1, 0, 1, 0),
    Position = UDim2.new(0.5, 0, 0.5, 0),
    Parent = outline2
})

-- Main content area
local main = create("Frame", {
    AnchorPoint = Vector2.new(0.5, 1),
    BackgroundColor3 = Theme.BackgroundColor,
    BorderColor3 = Theme.BorderColor,
    BorderMode = "Inset",
    BorderSizePixel = 1,
    Size = UDim2.new(1, -10, 1, -25),
    Position = UDim2.new(0.5, 0, 1, -5),
    Parent = outline2
})

-- Title bar
local titleBar = create("Frame", {
    BackgroundTransparency = 1,
    Size = UDim2.new(1, 0, 0, 20),
    Position = UDim2.new(0, 0, 0, 0),
    Parent = outline2
})

-- Title text
local titleText = create("TextLabel", {
    AnchorPoint = Vector2.new(0.5, 0),
    BackgroundTransparency = 1,
    Size = UDim2.new(1, -50, 1, 0),
    Position = UDim2.new(0.5, -25, 0, 0),
    Font = Theme.Font,
    Text = "example.lol | gg/yeah",
    TextColor3 = Theme.PrimaryText,
    TextXAlignment = Enum.TextXAlignment.Center,
    TextSize = 12,
    TextStrokeTransparency = 0,
    Parent = titleBar
})

-- CLOSE BUTTON (Top Right)
local closeButton = create("Frame", {
    AnchorPoint = Vector2.new(1, 0),
    BackgroundColor3 = Theme.CloseButtonColor,
    BorderColor3 = Color3.fromRGB(12, 12, 12),
    BorderMode = "Inset",
    BorderSizePixel = 1,
    Size = UDim2.new(0, 20, 0, 20),
    Position = UDim2.new(1, 0, 0, 0),
    Parent = titleBar
})

local closeButtonOutline = create("Frame", {
    BackgroundColor3 = Theme.CloseButtonColor,
    BorderColor3 = Theme.BorderColor,
    BorderMode = "Inset",
    BorderSizePixel = 1,
    Size = UDim2.new(1, 0, 1, 0),
    Parent = closeButton
})

local closeButtonText = create("TextLabel", {
    BackgroundTransparency = 1,
    Size = UDim2.new(1, 0, 1, 0),
    Font = Theme.Font,
    Text = "X",
    TextColor3 = Theme.PrimaryText,
    TextSize = 12,
    TextStrokeTransparency = 0,
    Parent = closeButtonOutline
})

local closeButtonClick = create("TextButton", {
    BackgroundTransparency = 1,
    Size = UDim2.new(1, 0, 1, 0),
    Text = "",
    Parent = closeButton
})

closeButtonClick.MouseButton1Down:Connect(function()
    screenGui.Enabled = false
end)

-- Main content outline
local outline3 = create("Frame", {
    AnchorPoint = Vector2.new(0.5, 0.5),
    BackgroundColor3 = Theme.SurfaceColor,
    BorderColor3 = Color3.fromRGB(12, 12, 12),
    BorderMode = "Inset",
    BorderSizePixel = 1,
    Size = UDim2.new(1, 0, 1, 0),
    Position = UDim2.new(0.5, 0, 0.5, 0),
    Parent = main
})

-- Content holder
local holder = create("Frame", {
    AnchorPoint = Vector2.new(0.5, 0.5),
    BackgroundTransparency = 1,
    Size = UDim2.new(1, -6, 1, -6),
    Position = UDim2.new(0.5, 0, 0.5, 0),
    Parent = main
})

-- Tab system
local tabs = create("Frame", {
    AnchorPoint = Vector2.new(0.5, 1),
    BackgroundColor3 = Theme.BackgroundColor,
    BorderColor3 = Color3.fromRGB(12, 12, 12),
    BorderMode = "Inset",
    BorderSizePixel = 1,
    Size = UDim2.new(1, 0, 1, -20),
    Position = UDim2.new(0.5, 0, 1, 0),
    Parent = holder
})

-- Tab buttons container
local tabsButtons = create("Frame", {
    AnchorPoint = Vector2.new(0.5, 0),
    BackgroundTransparency = 1,
    Size = UDim2.new(1, 0, 0, 21),
    Position = UDim2.new(0.5, 0, 0, 0),
    ZIndex = 2,
    Parent = holder
})

-- Tab content area
local tabContent = create("Frame", {
    BackgroundColor3 = Theme.BackgroundColor,
    BorderColor3 = Theme.BorderColor,
    BorderMode = "Inset",
    BorderSizePixel = 1,
    Size = UDim2.new(1, 0, 1, 0),
    Position = UDim2.new(0, 0, 0, 0),
    Parent = tabs
})

-- Tab layout
create("UIListLayout", {
    FillDirection = Enum.FillDirection.Horizontal,
    Padding = UDim.new(0, 4),
    Parent = tabsButtons
})

-- Create tabs
local tabNames = {"Combat", "Visuals", "Misc", "Settings"}
local tabPages = {}
local activeTab = nil

for i, tabName in ipairs(tabNames) do
    -- Tab button
    local tabButton = create("Frame", {
        BackgroundColor3 = Theme.BackgroundColor,
        BorderColor3 = Color3.fromRGB(12, 12, 12),
        BorderMode = "Inset",
        BorderSizePixel = 1,
        Size = UDim2.new(0, 120, 1, 0),
        Parent = tabsButtons
    })
    
    local tabOutline = create("Frame", {
        BackgroundColor3 = Theme.SurfaceColor,
        BorderColor3 = Theme.BorderColor,
        BorderMode = "Inset",
        BorderSizePixel = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Position = UDim2.new(0, 0, 0, 0),
        Parent = tabButton
    })
    
    local tabClickButton = create("TextButton", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Position = UDim2.new(0, 0, 0, 0),
        Text = "",
        Parent = tabButton
    })
    
    local tabLabel = create("TextLabel", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 20),
        Position = UDim2.new(0, 0, 0, 0),
        Font = Theme.Font,
        Text = tabName,
        TextColor3 = Theme.PrimaryText,
        TextSize = 12,
        TextStrokeTransparency = 0,
        Parent = tabOutline
    })
    
    -- Tab indicator line
    local tabLine = create("Frame", {
        BackgroundColor3 = Theme.SurfaceColor,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 2),
        Position = UDim2.new(0, 0, 1, 0),
        ZIndex = 2,
        Parent = tabOutline
    })
    
    -- Tab page content with proper scrolling
    local tabPage = create("ScrollingFrame", {
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Size = UDim2.new(1, -10, 1, -10),
        Position = UDim2.new(0, 5, 0, 5),
        AutomaticCanvasSize = Enum.AutomaticSize.Y,
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ScrollBarImageTransparency = 0.3,
        ScrollBarImageColor3 = Theme.AccentColor,
        ScrollBarThickness = 8,
        ScrollingDirection = Enum.ScrollingDirection.Y,
        Visible = false,
        ClipsDescendants = true,
        Parent = tabContent
    })
    
    tabPages[i] = {
        button = tabButton,
        outline = tabOutline,
        label = tabLabel,
        line = tabLine,
        page = tabPage,
        name = tabName
    }
    
    -- Tab click functionality
    tabClickButton.MouseButton1Down:Connect(function()
        -- Hide all tabs
        for _, tab in pairs(tabPages) do
            tab.page.Visible = false
            tab.outline.BackgroundColor3 = Theme.SurfaceColor
            tab.line.Size = UDim2.new(1, 0, 0, 2)
            tab.line.BackgroundColor3 = Theme.SurfaceColor
        end
        
        -- Show selected tab
        tabPages[i].page.Visible = true
        tabPages[i].outline.BackgroundColor3 = Theme.BackgroundColor
        tabPages[i].line.Size = UDim2.new(1, 0, 0, 3)
        tabPages[i].line.BackgroundColor3 = Theme.AccentColor
        activeTab = tabPages[i]
    end)
    
    -- Set first tab as active
    if i == 1 then
        tabPages[i].page.Visible = true
        tabPages[i].outline.BackgroundColor3 = Theme.BackgroundColor
        tabPages[i].line.Size = UDim2.new(1, 0, 0, 3)
        tabPages[i].line.BackgroundColor3 = Theme.AccentColor
        activeTab = tabPages[i]
    end
end

-- SECTION CREATION with better scrolling
local function createSection(parent, name, position, size)
    local sectionHolder = create("Frame", {
        BackgroundColor3 = Theme.SurfaceColor,
        BorderColor3 = Theme.BorderColor,
        BorderMode = "Inset",
        BorderSizePixel = 1,
        Size = size or UDim2.new(0, 400, 0, 300),
        Position = position or UDim2.new(0, 0, 0, 0),
        Parent = parent
    })
    
    local sectionOutline = create("Frame", {
        BackgroundColor3 = Theme.SurfaceColor,
        BorderColor3 = Color3.fromRGB(12, 12, 12),
        BorderMode = "Inset",
        BorderSizePixel = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Parent = sectionHolder
    })
    
    local accentLine = create("Frame", {
        AnchorPoint = Vector2.new(0.5, 0),
        BackgroundColor3 = Theme.AccentColor,
        BorderSizePixel = 0,
        Size = UDim2.new(1, -2, 0, 1),
        Position = UDim2.new(0.5, 0, 0, 0),
        Parent = sectionOutline
    })
    
    local sectionTitle = create("TextLabel", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, -5, 0, 20),
        Position = UDim2.new(0, 5, 0, 2),
        Font = Theme.Font,
        Text = name,
        TextColor3 = Theme.PrimaryText,
        TextSize = 12,
        TextStrokeTransparency = 0,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = sectionOutline
    })
    
    -- Better scrolling frame
    local sectionContent = create("ScrollingFrame", {
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Size = UDim2.new(1, -10, 1, -30),
        Position = UDim2.new(0, 5, 0, 25),
        AutomaticCanvasSize = Enum.AutomaticSize.Y,
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ScrollBarImageTransparency = 0.3,
        ScrollBarImageColor3 = Theme.AccentColor,
        ScrollBarThickness = 6,
        ScrollingDirection = Enum.ScrollingDirection.Y,
        ClipsDescendants = true,
        Parent = sectionOutline
    })
    
    create("UIListLayout", {
        FillDirection = Enum.FillDirection.Vertical,
        Padding = UDim.new(0, 3),
        Parent = sectionContent
    })
    
    return sectionContent
end

-- SUB TAB SYSTEM
local function createSubTabs(parent, subTabNames)
    local subTabContainer = create("Frame", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 30),
        Position = UDim2.new(0, 0, 0, 0),
        Parent = parent
    })
    
    create("UIListLayout", {
        FillDirection = Enum.FillDirection.Horizontal,
        Padding = UDim.new(0, 5),
        Parent = subTabContainer
    })
    
    local subTabPages = {}
    local activeSubTab = nil
    
    for i, subTabName in ipairs(subTabNames) do
        local subTabButton = create("Frame", {
            BackgroundColor3 = Theme.ButtonColor,
            BorderColor3 = Color3.fromRGB(12, 12, 12),
            BorderMode = "Inset",
            BorderSizePixel = 1,
            Size = UDim2.new(0, 150, 0, 30),
            Parent = subTabContainer
        })
        
        local subTabOutline = create("Frame", {
            BackgroundColor3 = Theme.ButtonColor,
            BorderColor3 = Theme.BorderColor,
            BorderMode = "Inset",
            BorderSizePixel = 1,
            Size = UDim2.new(1, 0, 1, 0),
            Parent = subTabButton
        })
        
        local subTabLabel = create("TextLabel", {
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 1, 0),
            Font = Theme.Font,
            Text = subTabName,
            TextColor3 = Theme.PrimaryText,
            TextSize = 12,
            TextStrokeTransparency = 0,
            Parent = subTabOutline
        })
        
        local subTabClick = create("TextButton", {
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 1, 0),
            Text = "",
            Parent = subTabButton
        })
        
        -- Sub-tab page with proper scrolling
        local subTabPage = create("ScrollingFrame", {
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 1, -35),
            Position = UDim2.new(0, 0, 0, 35),
            AutomaticCanvasSize = Enum.AutomaticSize.Y,
            CanvasSize = UDim2.new(0, 0, 0, 0),
            ScrollBarImageTransparency = 0.3,
            ScrollBarImageColor3 = Theme.AccentColor,
            ScrollBarThickness = 8,
            ScrollingDirection = Enum.ScrollingDirection.Y,
            Visible = false,
            ClipsDescendants = true,
            Parent = parent
        })
        
        subTabPages[i] = {
            button = subTabButton,
            outline = subTabOutline,
            label = subTabLabel,
            page = subTabPage,
            name = subTabName
        }
        
        subTabClick.MouseButton1Down:Connect(function()
            for _, subTab in pairs(subTabPages) do
                subTab.page.Visible = false
                subTab.outline.BackgroundColor3 = Theme.ButtonColor
            end
            
            subTabPages[i].page.Visible = true
            subTabPages[i].outline.BackgroundColor3 = Theme.AccentColor
            activeSubTab = subTabPages[i]
        end)
        
        if i == 1 then
            subTabPages[i].page.Visible = true
            subTabPages[i].outline.BackgroundColor3 = Theme.AccentColor
            activeSubTab = subTabPages[i]
        end
    end
    
    return subTabPages
end

-- Component creation functions
local function createToggle(parent, name, defaultValue, callback)
    local toggleHolder = create("Frame", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 22),
        Parent = parent
    })
    
    local toggleBox = create("Frame", {
        BackgroundColor3 = Theme.SurfaceColor,
        BorderColor3 = Color3.fromRGB(12, 12, 12),
        BorderMode = "Inset",
        BorderSizePixel = 1,
        Size = UDim2.new(0, 18, 0, 18),
        Position = UDim2.new(0, 0, 0, 2),
        Parent = toggleHolder
    })
    
    local toggleColor = create("Frame", {
        BackgroundColor3 = defaultValue and Theme.ToggleActiveColor or Theme.BackgroundColor,
        BorderColor3 = Theme.BorderColor,
        BorderMode = "Inset",
        BorderSizePixel = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Parent = toggleBox
    })
    
    create("UIGradient", {
        Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0.00, Color3.fromRGB(199, 191, 204)), 
            ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))
        },
        Rotation = 90,
        Parent = toggleColor
    })
    
    local toggleButton = create("TextButton", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Text = "",
        Parent = toggleHolder
    })
    
    local toggleLabel = create("TextLabel", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, -25, 1, 0),
        Position = UDim2.new(0, 25, 0, 0),
        Font = Theme.Font,
        Text = name,
        TextColor3 = Theme.PrimaryText,
        TextSize = 11,
        TextStrokeTransparency = 0,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = toggleHolder
    })
    
    local isToggled = defaultValue
    
    toggleButton.MouseButton1Down:Connect(function()
        isToggled = not isToggled
        toggleColor.BackgroundColor3 = isToggled and Theme.ToggleActiveColor or Theme.BackgroundColor
        callback(isToggled)
    end)
    
    return toggleHolder, function() return isToggled end, function(value) 
        isToggled = value
        toggleColor.BackgroundColor3 = isToggled and Theme.ToggleActiveColor or Theme.BackgroundColor
    end
end

local function createToggleWithHotkey(parent, name, defaultValue, callback)
    local toggleHolder = create("Frame", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 22),
        Parent = parent
    })
    
    local toggleBox = create("Frame", {
        BackgroundColor3 = Theme.SurfaceColor,
        BorderColor3 = Color3.fromRGB(12, 12, 12),
        BorderMode = "Inset",
        BorderSizePixel = 1,
        Size = UDim2.new(0, 18, 0, 18),
        Position = UDim2.new(0, 0, 0, 2),
        Parent = toggleHolder
    })
    
    local toggleColor = create("Frame", {
        BackgroundColor3 = defaultValue and Theme.ToggleActiveColor or Theme.BackgroundColor,
        BorderColor3 = Theme.BorderColor,
        BorderMode = "Inset",
        BorderSizePixel = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Parent = toggleBox
    })
    
    create("UIGradient", {
        Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0.00, Color3.fromRGB(199, 191, 204)), 
            ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))
        },
        Rotation = 90,
        Parent = toggleColor
    })
    
    local toggleButton = create("TextButton", {
        BackgroundTransparency = 1,
        Size = UDim2.new(0, 18, 1, 0),
        Text = "",
        Parent = toggleHolder
    })
    
    local toggleLabel = create("TextLabel", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, -130, 1, 0),
        Position = UDim2.new(0, 25, 0, 0),
        Font = Theme.Font,
        Text = name,
        TextColor3 = Theme.PrimaryText,
        TextSize = 11,
        TextStrokeTransparency = 0,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = toggleHolder
    })
    
    -- Hotkey selector
    local hotkeyButton = create("Frame", {
        BackgroundColor3 = Theme.ButtonColor,
        BorderColor3 = Color3.fromRGB(12, 12, 12),
        BorderMode = "Inset",
        BorderSizePixel = 1,
        Size = UDim2.new(0, 90, 0, 18),
        Position = UDim2.new(1, -90, 0, 2),
        Parent = toggleHolder
    })
    
    local hotkeyLabel = create("TextLabel", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Font = Theme.Font,
        Text = "None",
        TextColor3 = Theme.PrimaryText,
        TextSize = 10,
        TextStrokeTransparency = 0,
        Parent = hotkeyButton
    })
    
    local hotkeyClick = create("TextButton", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Text = "",
        Parent = hotkeyButton
    })
    
    local isToggled = defaultValue
    local currentHotkey = nil
    local waitingForKey = false
    
    toggleButton.MouseButton1Down:Connect(function()
        isToggled = not isToggled
        toggleColor.BackgroundColor3 = isToggled and Theme.ToggleActiveColor or Theme.BackgroundColor
        callback(isToggled)
    end)
    
    hotkeyClick.MouseButton1Down:Connect(function()
        waitingForKey = true
        hotkeyLabel.Text = "Press Key..."
        hotkeyLabel.TextColor3 = Theme.AccentColor
    end)
    
    UserInputService.InputBegan:Connect(function(input)
        if waitingForKey and input.UserInputType == Enum.UserInputType.Keyboard then
            currentHotkey = input.KeyCode
            hotkeyLabel.Text = input.KeyCode.Name
            hotkeyLabel.TextColor3 = Theme.PrimaryText
            waitingForKey = false
        elseif currentHotkey and input.KeyCode == currentHotkey then
            isToggled = not isToggled
            toggleColor.BackgroundColor3 = isToggled and Theme.ToggleActiveColor or Theme.BackgroundColor
            callback(isToggled)
        end
    end)
    
    return toggleHolder, function() return isToggled end, function(value) 
        isToggled = value
        toggleColor.BackgroundColor3 = isToggled and Theme.ToggleActiveColor or Theme.BackgroundColor
    end, function() return currentHotkey end
end

local function createSlider(parent, name, min, max, defaultValue, callback)
    local sliderHolder = create("Frame", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 45),
        Parent = parent
    })
    
    local title = create("TextLabel", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, -70, 0, 20),
        Position = UDim2.new(0, 0, 0, 0),
        Font = Theme.Font,
        Text = name,
        TextColor3 = Theme.PrimaryText,
        TextSize = 11,
        TextStrokeTransparency = 0,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = sliderHolder
    })
    
    local valueLabel = create("TextLabel", {
        BackgroundTransparency = 1,
        Size = UDim2.new(0, 70, 0, 20),
        Position = UDim2.new(1, -70, 0, 0),
        Font = Theme.Font,
        Text = defaultValue.."/"..max,
        TextColor3 = Theme.AccentColor,
        TextSize = 10,
        TextStrokeTransparency = 0,
        TextXAlignment = Enum.TextXAlignment.Right,
        Parent = sliderHolder
    })
    
    local outline = create("Frame", {
        BackgroundColor3 = Theme.SurfaceColor,
        BorderColor3 = Color3.fromRGB(12, 12, 12),
        BorderMode = "Inset",
        BorderSizePixel = 1,
        Size = UDim2.new(1, 0, 0, 16),
        Position = UDim2.new(0, 0, 0, 25),
        Parent = sliderHolder
    })
    
    local outline2 = create("Frame", {
        BackgroundColor3 = Theme.ButtonColor,
        BorderColor3 = Theme.BorderColor,
        BorderMode = "Inset",
        BorderSizePixel = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Parent = outline
    })
    
    local color = create("Frame", {
        BackgroundColor3 = Theme.ButtonColor,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 1, 0),
        Parent = outline2
    })
    
    create("UIGradient", {
        Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0.00, Color3.fromRGB(199, 191, 204)), 
            ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))
        },
        Rotation = 90,
        Parent = color
    })
    
    local slide = create("Frame", {
        BackgroundColor3 = Theme.SliderFillColor,
        BorderSizePixel = 0,
        Size = UDim2.new((defaultValue - min) / (max - min), 0, 1, 0),
        ZIndex = 2,
        Parent = outline
    })
    
    create("UIGradient", {
        Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0.00, Color3.fromRGB(199, 191, 204)), 
            ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))
        },
        Rotation = 90,
        Parent = slide
    })
    
    local sliderButton = create("TextButton", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Text = "",
        Parent = sliderHolder
    })
    
    local currentValue = defaultValue
    local holding = false
    
    local function updateSlider()
        local size = math.clamp((mouse.X - color.AbsolutePosition.X), 0, color.AbsoluteSize.X)
        local result = (max - min) / color.AbsoluteSize.X * size + min
        local newValue = round(result, 0)
        
        valueLabel.Text = newValue.."/"..max
        currentValue = newValue
        callback(newValue)
        
        slide:TweenSize(
            UDim2.new((1 / color.AbsoluteSize.X) * size, 0, 1, 0),
            Enum.EasingDirection.Out,
            Enum.EasingStyle.Quad,
            0.1,
            true
        )
    end
    
    sliderButton.MouseButton1Down:Connect(function()
        holding = true
        updateSlider()
        outline.BorderColor3 = Theme.AccentColor
    end)
    
    UserInputService.InputChanged:Connect(function()
        if holding then
            updateSlider()
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 and holding then
            holding = false
            outline.BorderColor3 = Color3.fromRGB(12, 12, 12)
        end
    end)
    
    return sliderHolder, function() return currentValue end
end

-- DROPDOWN with proper positioning
local function createDropdown(parent, name, options, defaultValue, callback)
    local dropdownHolder = create("Frame", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 45),
        ZIndex = 2,
        Parent = parent
    })
    
    local title = create("TextLabel", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 20),
        Position = UDim2.new(0, 0, 0, 0),
        Font = Theme.Font,
        Text = name,
        TextColor3 = Theme.PrimaryText,
        TextSize = 11,
        TextStrokeTransparency = 0,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = dropdownHolder
    })
    
    local outline = create("Frame", {
        BackgroundColor3 = Theme.SurfaceColor,
        BorderColor3 = Color3.fromRGB(12, 12, 12),
        BorderMode = "Inset",
        BorderSizePixel = 1,
        Size = UDim2.new(1, 0, 0, 22),
        Position = UDim2.new(0, 0, 0, 23),
        Parent = dropdownHolder
    })
    
    local outline2 = create("Frame", {
        BackgroundColor3 = Theme.SurfaceColor,
        BorderColor3 = Theme.BorderColor,
        BorderMode = "Inset",
        BorderSizePixel = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Parent = outline
    })
    
    local color = create("Frame", {
        BackgroundColor3 = Theme.DropdownColor,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 1, 0),
        Parent = outline2
    })
    
    create("UIGradient", {
        Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0.00, Color3.fromRGB(199, 191, 204)), 
            ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))
        },
        Rotation = 90,
        Parent = color
    })
    
    local value = create("TextLabel", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, -30, 1, 0),
        Position = UDim2.new(0, 8, 0, 0),
        Font = Theme.Font,
        Text = defaultValue,
        TextColor3 = Theme.PrimaryText,
        TextSize = 11,
        TextStrokeTransparency = 0,
        TextXAlignment = Enum.TextXAlignment.Left,
        ClipsDescendants = true,
        Parent = outline
    })
    
    local indicator = create("TextLabel", {
        AnchorPoint = Vector2.new(0.5, 0),
        BackgroundTransparency = 1,
        Size = UDim2.new(1, -15, 1, 0),
        Position = UDim2.new(0.5, 0, 0, 0),
        Font = Theme.Font,
        Text = "+",
        TextColor3 = Theme.PrimaryText,
        TextSize = 14,
        TextStrokeTransparency = 0,
        TextXAlignment = Enum.TextXAlignment.Right,
        Parent = outline
    })
    
    local dropdownButton = create("TextButton", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Text = "",
        Parent = dropdownHolder
    })
    
    -- Options appear OVER the GUI
    local optionsHolder = create("Frame", {
        BackgroundColor3 = Theme.BorderColor,
        BorderColor3 = Theme.BorderColor,
        BorderMode = "Inset",
        BorderSizePixel = 1,
        Size = UDim2.new(0, outline.AbsoluteSize.X, 0, math.min(#options * 20, 120)),
        Position = UDim2.new(0, outline.AbsolutePosition.X - parent.AbsolutePosition.X, 0, 70),
        Visible = false,
        ZIndex = 150,
        Parent = screenGui
    })
    
    local optionsOutline = create("ScrollingFrame", {
        BackgroundColor3 = Theme.BorderColor,
        BorderColor3 = Theme.BorderColor,
        BorderMode = "Inset",
        BorderSizePixel = 1,
        Size = UDim2.new(1, 0, 1, 0),
        ClipsDescendants = true,
        CanvasSize = UDim2.new(0, 0, 0, 20 * #options),
        ScrollBarImageTransparency = 0.25,
        ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0),
        ScrollBarThickness = 4,
        ZIndex = 151,
        Parent = optionsHolder
    })
    
    create("UIListLayout", {
        FillDirection = Enum.FillDirection.Vertical,
        Parent = optionsOutline
    })
    
    local currentValue = defaultValue
    local isOpen = false
    
    for i, option in ipairs(options) do
        local optionButton = create("TextButton", {
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 0, 20),
            Text = "",
            ZIndex = 152,
            Parent = optionsOutline
        })
        
        local optionTitle = create("TextLabel", {
            AnchorPoint = Vector2.new(0.5, 0),
            BackgroundTransparency = 1,
            Size = UDim2.new(1, -15, 1, 0),
            Position = UDim2.new(0.5, 0, 0, 0),
            Font = Theme.Font,
            Text = option,
            TextColor3 = option == currentValue and Theme.AccentColor or Theme.PrimaryText,
            TextSize = 11,
            TextStrokeTransparency = 0,
            TextXAlignment = Enum.TextXAlignment.Left,
            ZIndex = 152,
            Parent = optionButton
        })
        
        optionButton.MouseButton1Down:Connect(function()
            optionsHolder.Visible = false
            isOpen = false
            indicator.Text = "+"
            
            -- Update colors
            for _, child in pairs(optionsOutline:GetChildren()) do
                if child:IsA("TextButton") then
                    local label = child:FindFirstChild("TextLabel")
                    if label then
                        label.TextColor3 = Theme.PrimaryText
                    end
                end
            end
            
            currentValue = option
            value.Text = option
            optionTitle.TextColor3 = Theme.AccentColor
            callback(option)
        end)
    end
    
    dropdownButton.MouseButton1Down:Connect(function()
        local absolutePos = outline.AbsolutePosition
        optionsHolder.Position = UDim2.new(0, absolutePos.X, 0, absolutePos.Y + 25)
        optionsHolder.Size = UDim2.new(0, outline.AbsoluteSize.X, 0, math.min(#options * 20, 120))
        
        optionsHolder.Visible = not isOpen
        isOpen = not isOpen
        indicator.Text = isOpen and "-" or "+"
    end)
    
    return dropdownHolder, function() return currentValue end
end

-- MULTI DROPDOWN
local function createMultiDropdown(parent, name, options, callback)
    local dropdownHolder = create("Frame", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 45),
        ZIndex = 2,
        Parent = parent
    })
    
    local title = create("TextLabel", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 20),
        Position = UDim2.new(0, 0, 0, 0),
        Font = Theme.Font,
        Text = name,
        TextColor3 = Theme.PrimaryText,
        TextSize = 11,
        TextStrokeTransparency = 0,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = dropdownHolder
    })
    
    local outline = create("Frame", {
        BackgroundColor3 = Theme.SurfaceColor,
        BorderColor3 = Color3.fromRGB(12, 12, 12),
        BorderMode = "Inset",
        BorderSizePixel = 1,
        Size = UDim2.new(1, 0, 0, 22),
        Position = UDim2.new(0, 0, 0, 23),
        Parent = dropdownHolder
    })
    
    local outline2 = create("Frame", {
        BackgroundColor3 = Theme.SurfaceColor,
        BorderColor3 = Theme.BorderColor,
        BorderMode = "Inset",
        BorderSizePixel = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Parent = outline
    })
    
    local color = create("Frame", {
        BackgroundColor3 = Theme.DropdownColor,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 1, 0),
        Parent = outline2
    })
    
    create("UIGradient", {
        Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0.00, Color3.fromRGB(199, 191, 204)), 
            ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))
        },
        Rotation = 90,
        Parent = color
    })
    
    local value = create("TextLabel", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, -30, 1, 0),
        Position = UDim2.new(0, 8, 0, 0),
        Font = Theme.Font,
        Text = "None",
        TextColor3 = Theme.PrimaryText,
        TextSize = 11,
        TextStrokeTransparency = 0,
        TextXAlignment = Enum.TextXAlignment.Left,
        ClipsDescendants = true,
        Parent = outline
    })
    
    local indicator = create("TextLabel", {
        AnchorPoint = Vector2.new(0.5, 0),
        BackgroundTransparency = 1,
        Size = UDim2.new(1, -15, 1, 0),
        Position = UDim2.new(0.5, 0, 0, 0),
        Font = Theme.Font,
        Text = "+",
        TextColor3 = Theme.PrimaryText,
        TextSize = 14,
        TextStrokeTransparency = 0,
        TextXAlignment = Enum.TextXAlignment.Right,
        Parent = outline
    })
    
    local dropdownButton = create("TextButton", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Text = "",
        Parent = dropdownHolder
    })
    
    -- Options appear OVER the GUI
    local optionsHolder = create("Frame", {
        BackgroundColor3 = Theme.BorderColor,
        BorderColor3 = Theme.BorderColor,
        BorderMode = "Inset",
        BorderSizePixel = 1,
        Size = UDim2.new(0, outline.AbsoluteSize.X, 0, math.min(#options * 20, 120)),
        Position = UDim2.new(0, outline.AbsolutePosition.X - parent.AbsolutePosition.X, 0, 70),
        Visible = false,
        ZIndex = 150,
        Parent = screenGui
    })
    
    local optionsOutline = create("ScrollingFrame", {
        BackgroundColor3 = Theme.BorderColor,
        BorderColor3 = Theme.BorderColor,
        BorderMode = "Inset",
        BorderSizePixel = 1,
        Size = UDim2.new(1, 0, 1, 0),
        ClipsDescendants = true,
        CanvasSize = UDim2.new(0, 0, 0, 20 * #options),
        ScrollBarImageTransparency = 0.25,
        ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0),
        ScrollBarThickness = 4,
        ZIndex = 151,
        Parent = optionsHolder
    })
    
    create("UIListLayout", {
        FillDirection = Enum.FillDirection.Vertical,
        Parent = optionsOutline
    })
    
    local selectedOptions = {}
    local isOpen = false
    
    local function updateValueText()
        if #selectedOptions == 0 then
            value.Text = "None"
        elseif #selectedOptions == 1 then
            value.Text = selectedOptions[1]
        else
            value.Text = selectedOptions[1] .. " +" .. (#selectedOptions - 1)
        end
    end
    
    for i, option in ipairs(options) do
        local optionButton = create("TextButton", {
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 0, 20),
            Text = "",
            ZIndex = 152,
            Parent = optionsOutline
        })
        
        local optionTitle = create("TextLabel", {
            AnchorPoint = Vector2.new(0.5, 0),
            BackgroundTransparency = 1,
            Size = UDim2.new(1, -15, 1, 0),
            Position = UDim2.new(0.5, 0, 0, 0),
            Font = Theme.Font,
            Text = option,
            TextColor3 = Theme.PrimaryText,
            TextSize = 11,
            TextStrokeTransparency = 0,
            TextXAlignment = Enum.TextXAlignment.Left,
            ZIndex = 152,
            Parent = optionButton
        })
        
        optionButton.MouseButton1Down:Connect(function()
            local found = false
            for j, selected in ipairs(selectedOptions) do
                if selected == option then
                    table.remove(selectedOptions, j)
                    optionTitle.TextColor3 = Theme.PrimaryText
                    found = true
                    break
                end
            end
            
            if not found then
                table.insert(selectedOptions, option)
                optionTitle.TextColor3 = Theme.AccentColor
            end
            
            updateValueText()
            callback(selectedOptions)
        end)
    end
    
    dropdownButton.MouseButton1Down:Connect(function()
        local absolutePos = outline.AbsolutePosition
        optionsHolder.Position = UDim2.new(0, absolutePos.X, 0, absolutePos.Y + 25)
        optionsHolder.Size = UDim2.new(0, outline.AbsoluteSize.X, 0, math.min(#options * 20, 120))
        
        optionsHolder.Visible = not isOpen
        isOpen = not isOpen
        indicator.Text = isOpen and "-" or "+"
    end)
    
    return dropdownHolder, function() return selectedOptions end
end

-- COLOR PICKER
local function createColorPicker(parent, name, defaultColor, callback)
    local colorHolder = create("Frame", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 22),
        ZIndex = 2,
        Parent = parent
    })
    
    local outline = create("Frame", {
        AnchorPoint = Vector2.new(1, 0),
        BackgroundColor3 = Theme.SurfaceColor,
        BorderColor3 = Color3.fromRGB(12, 12, 12),
        BorderMode = "Inset",
        BorderSizePixel = 1,
        Size = UDim2.new(0, 40, 0, 20),
        Position = UDim2.new(1, 0, 0, 1),
        Parent = colorHolder
    })
    
    local outline2 = create("Frame", {
        BackgroundColor3 = Theme.SurfaceColor,
        BorderColor3 = Theme.ColorPickerBorder,
        BorderMode = "Inset",
        BorderSizePixel = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Parent = outline
    })
    
    local cpColor = create("Frame", {
        BackgroundColor3 = defaultColor,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 1, 0),
        Parent = outline2
    })
    
    create("UIGradient", {
        Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0.00, Color3.fromRGB(199, 191, 204)), 
            ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 255, 255))
        },
        Rotation = 90,
        Parent = cpColor
    })
    
    local title = create("TextLabel", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, -45, 1, 0),
        Position = UDim2.new(0, 0, 0, 0),
        Font = Theme.Font,
        Text = name,
        TextColor3 = Theme.PrimaryText,
        TextSize = 11,
        TextStrokeTransparency = 0,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = colorHolder
    })
    
    local button = create("TextButton", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Text = "",
        Parent = colorHolder
    })
    
    -- COLOR WHEEL PICKER WINDOW
    local colorPickerWindow = create("Frame", {
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = Theme.AccentColor,
        BorderColor3 = Color3.fromRGB(12, 12, 12),
        BorderSizePixel = 1,
        Size = UDim2.new(0, 350, 0, 280),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Visible = false,
        ZIndex = 200,
        Parent = screenGui
    })
    
    local colorPickerOutline2 = create("Frame", {
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = Color3.fromRGB(0, 0, 0),
        BorderColor3 = Color3.fromRGB(12, 12, 12),
        BorderSizePixel = 1,
        Size = UDim2.new(1, -4, 1, -4),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        ZIndex = 201,
        Parent = colorPickerWindow
    })
    
    local colorPickerIndent = create("Frame", {
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = Theme.BackgroundColor,
        BorderColor3 = Theme.BorderColor,
        BorderMode = "Inset",
        BorderSizePixel = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        ZIndex = 202,
        Parent = colorPickerOutline2
    })
    
    -- Title bar
    local colorPickerTitleBar = create("Frame", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 25),
        Position = UDim2.new(0, 0, 0, 0),
        ZIndex = 203,
        Parent = colorPickerIndent
    })
    
    local colorPickerTitle = create("TextLabel", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, -30, 1, 0),
        Position = UDim2.new(0, 5, 0, 0),
        Font = Theme.Font,
        Text = "Color Picker - " .. name,
        TextColor3 = Theme.PrimaryText,
        TextSize = 12,
        TextStrokeTransparency = 0,
        TextXAlignment = Enum.TextXAlignment.Left,
        ZIndex = 203,
        Parent = colorPickerTitleBar
    })
    
    -- Close button
    local colorPickerClose = create("TextButton", {
        AnchorPoint = Vector2.new(1, 0),
        BackgroundColor3 = Theme.CloseButtonColor,
        BorderColor3 = Color3.fromRGB(12, 12, 12),
        BorderMode = "Inset",
        BorderSizePixel = 1,
        Size = UDim2.new(0, 25, 0, 25),
        Position = UDim2.new(1, 0, 0, 0),
        Text = "X",
        TextColor3 = Theme.PrimaryText,
        TextSize = 12,
        Font = Theme.Font,
        ZIndex = 203,
        Parent = colorPickerTitleBar
    })
    
    -- COLOR WHEEL
    local colorWheel = create("ImageLabel", {
        BackgroundTransparency = 1,
        Size = UDim2.new(0, 180, 0, 180),
        Position = UDim2.new(0, 20, 0, 40),
        Image = "rbxassetid://698052001",
        ZIndex = 203,
        Parent = colorPickerIndent
    })
    
    local colorWheelSelector = create("Frame", {
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BorderColor3 = Color3.fromRGB(0, 0, 0),
        BorderSizePixel = 2,
        Size = UDim2.new(0, 8, 0, 8),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        ZIndex = 204,
        Parent = colorWheel
    })
    
    create("UICorner", {
        CornerRadius = UDim.new(1, 0),
        Parent = colorWheelSelector
    })
    
    -- Brightness/Saturation square
    local brightnessFrame = create("Frame", {
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BorderColor3 = Color3.fromRGB(12, 12, 12),
        BorderMode = "Inset",
        BorderSizePixel = 1,
        Size = UDim2.new(0, 100, 0, 100),
        Position = UDim2.new(0, 220, 0, 40),
        ZIndex = 203,
        Parent = colorPickerIndent
    })
    
    local brightnessGradient1 = create("Frame", {
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 1, 0),
        ZIndex = 204,
        Parent = brightnessFrame
    })
    
    create("UIGradient", {
        Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
            ColorSequenceKeypoint.new(1, defaultColor)
        },
        Rotation = 0,
        Parent = brightnessGradient1
    })
    
    local brightnessGradient2 = create("Frame", {
        BackgroundColor3 = Color3.fromRGB(0, 0, 0),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 1, 0),
        ZIndex = 205,
        Parent = brightnessFrame
    })
    
    create("UIGradient", {
        Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 0))
        },
        Rotation = 90,
        Transparency = NumberSequence.new{
            NumberSequenceKeypoint.new(0, 1),
            NumberSequenceKeypoint.new(1, 0)
        },
        Parent = brightnessGradient2
    })
    
    local brightnessSelector = create("Frame", {
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BorderColor3 = Color3.fromRGB(0, 0, 0),
        BorderSizePixel = 2,
        Size = UDim2.new(0, 8, 0, 8),
        Position = UDim2.new(1, 0, 0, 0),
        ZIndex = 206,
        Parent = brightnessFrame
    })
    
    create("UICorner", {
        CornerRadius = UDim.new(1, 0),
        Parent = brightnessSelector
    })
    
    -- Color preview
    local colorPreview = create("Frame", {
        BackgroundColor3 = defaultColor,
        BorderColor3 = Color3.fromRGB(12, 12, 12),
        BorderMode = "Inset",
        BorderSizePixel = 1,
        Size = UDim2.new(0, 100, 0, 30),
        Position = UDim2.new(0, 220, 0, 150),
        ZIndex = 203,
        Parent = colorPickerIndent
    })
    
    -- Hex input
    local hexInput = create("TextBox", {
        BackgroundColor3 = Theme.ButtonColor,
        BorderColor3 = Color3.fromRGB(12, 12, 12),
        BorderMode = "Inset",
        BorderSizePixel = 1,
        Size = UDim2.new(0, 100, 0, 25),
        Position = UDim2.new(0, 220, 0, 190),
        Font = Theme.Font,
        Text = toHex(defaultColor),
        TextColor3 = Theme.PrimaryText,
        TextSize = 11,
        TextStrokeTransparency = 0,
        PlaceholderText = "#FFFFFF",
        ZIndex = 203,
        Parent = colorPickerIndent
    })
    
    local currentColor = defaultColor
    local currentHue = 0
    local currentSat = 1
     -- Function to update the color wheel selector
    local function updateColorWheelSelector(hue, sat)
        local angle = hue * 2 * math.pi
        local radius = sat * 90
        colorWheelSelector.Position = UDim2.new(0.5, math.cos(angle) * radius, 0.5, math.sin(angle) * radius)
    end

    -- Function to update the brightness selector
    local function updateBrightnessSelector(brightness)
        brightnessSelector.Position = UDim2.new(1, 0, 1 - brightness, 0)
    end

    -- Function to update the current color
    local function updateCurrentColor(hue, sat, brightness)
        currentColor = HSVtoRGB(hue, sat, brightness)
        cpColor.BackgroundColor3 = currentColor
        colorPreview.BackgroundColor3 = currentColor
        hexInput.Text = toHex(currentColor)
        
        -- Update the gradient in the brightness frame
        local hueColor = HSVtoRGB(hue, sat, 1)
        brightnessGradient1.UIGradient.Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
            ColorSequenceKeypoint.new(1, hueColor)
        }
    end

    -- Initialize with default color
    local h, s, v = RGBtoHSV(defaultColor)
    currentHue = h
    currentSat = s
    updateColorWheelSelector(h, s)
    updateBrightnessSelector(v)
    updateCurrentColor(h, s, v)

    -- Color wheel interaction
    colorWheel.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            local connection
            connection = input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    connection:Disconnect()
                else
                    local x = (input.Position.X - colorWheel.AbsolutePosition.X) / colorWheel.AbsoluteSize.X - 0.5
                    local y = (input.Position.Y - colorWheel.AbsolutePosition.Y) / colorWheel.AbsoluteSize.Y - 0.5
                    
                    local angle = math.atan2(y, x)
                    if angle < 0 then angle = angle + 2 * math.pi end
                    currentHue = angle / (2 * math.pi)
                    
                    local radius = math.sqrt(x * x + y * y)
                    currentSat = math.clamp(radius / 0.5, 0, 1)
                    
                    updateColorWheelSelector(currentHue, currentSat)
                    updateCurrentColor(currentHue, currentSat, 1 - brightnessSelector.Position.Y.Scale)
                end
            end)
        end
    end)

    -- Brightness interaction
    brightnessFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            local connection
            connection = input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    connection:Disconnect()
                else
                    local y = 1 - ((input.Position.Y - brightnessFrame.AbsolutePosition.Y) / brightnessFrame.AbsoluteSize.Y)
                    y = math.clamp(y, 0, 1)
                    brightnessSelector.Position = UDim2.new(1, 0, 1 - y, 0)
                    updateCurrentColor(currentHue, currentSat, y)
                end
            end)
        end
    end)

    -- Hex input
    hexInput.FocusLost:Connect(function()
        local success, color = pcall(function()
            return fromHex(hexInput.Text)
        end)
        
        if success and color then
            local h, s, v = RGBtoHSV(color)
            currentHue = h
            currentSat = s
            updateColorWheelSelector(h, s)
            updateBrightnessSelector(v)
            updateCurrentColor(h, s, v)
        else
            hexInput.Text = toHex(currentColor)
        end
    end)

    -- Button to open/close color picker
    button.MouseButton1Down:Connect(function()
        colorPickerWindow.Visible = not colorPickerWindow.Visible
    end)

    -- Close color picker
    colorPickerClose.MouseButton1Down:Connect(function()
        colorPickerWindow.Visible = false
        callback(currentColor)
    end)

    -- Make color picker draggable
    makeDraggable(colorPickerWindow, colorPickerTitleBar)

    return colorHolder, function() return currentColor end
end

-- NOTIFICATION SYSTEM
local function sendNotification(title, text, duration)
    if not Settings.ShowNotifications then return end
    
    duration = duration or 5
    
    local notification = create("Frame", {
        BackgroundColor3 = Theme.NotificationColor,
        BorderColor3 = Color3.fromRGB(12, 12, 12),
        BorderSizePixel = 1,
        Size = UDim2.new(0, 300, 0, 80),
        Position = UDim2.new(1, -310, 1, -90),
        ClipsDescendants = true,
        Parent = screenGui
    })
    
    local notificationOutline = create("Frame", {
        BackgroundColor3 = Theme.NotificationColor,
        BorderColor3 = Theme.BorderColor,
        BorderMode = "Inset",
        BorderSizePixel = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Parent = notification
    })
    
    local titleLabel = create("TextLabel", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, -10, 0, 20),
        Position = UDim2.new(0, 5, 0, 5),
        Font = Theme.Font,
        Text = title,
        TextColor3 = Theme.PrimaryText,
        TextSize = 12,
        TextStrokeTransparency = 0,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = notificationOutline
    })
    
    local textLabel = create("TextLabel", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, -10, 1, -30),
        Position = UDim2.new(0, 5, 0, 25),
        Font = Theme.Font,
        Text = text,
        TextColor3 = Theme.PrimaryText,
        TextSize = 11,
        TextStrokeTransparency = 0,
        TextWrapped = true,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextYAlignment = Enum.TextYAlignment.Top,
        Parent = notificationOutline
    })
    
    local progressBar = create("Frame", {
        BackgroundColor3 = Theme.AccentColor,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 2),
        Position = UDim2.new(0, 0, 1, -2),
        Parent = notificationOutline
    })
    
    -- Animation
    notification:TweenPosition(
        UDim2.new(1, -310, 1, -90),
        Enum.EasingDirection.Out,
        Enum.EasingStyle.Quad,
        0.2,
        true
    )
    
    progressBar:TweenSize(
        UDim2.new(0, 0, 0, 2),
        Enum.EasingDirection.Out,
        Enum.EasingStyle.Linear,
        duration,
        true
    )
    
    delay(duration, function()
        notification:TweenPosition(
            UDim2.new(1, 310, 1, -90),
            Enum.EasingDirection.Out,
            Enum.EasingStyle.Quad,
            0.2,
            true,
            function()
                notification:Destroy()
            end
        )
    end)
end

-- WATERMARK
local watermark = create("Frame", {
    BackgroundColor3 = Theme.WatermarkColor,
    BorderColor3 = Color3.fromRGB(12, 12, 12),
    BorderSizePixel = 1,
    Size = UDim2.new(0, 200, 0, 25),
    Position = UDim2.new(0, 10, 0, 10),
    Visible = Settings.ShowWatermark,
    Parent = screenGui
})

local watermarkOutline = create("Frame", {
    BackgroundColor3 = Theme.WatermarkColor,
    BorderColor3 = Theme.BorderColor,
    BorderMode = "Inset",
    BorderSizePixel = 1,
    Size = UDim2.new(1, 0, 1, 0),
    Parent = watermark
})

local watermarkText = create("TextLabel", {
    BackgroundTransparency = 1,
    Size = UDim2.new(1, -10, 1, 0),
    Position = UDim2.new(0, 5, 0, 0),
    Font = Theme.Font,
    Text = "example.lol | FPS: 60 | "..player.Name,
    TextColor3 = Theme.PrimaryText,
    TextSize = 12,
    TextStrokeTransparency = 0,
    TextXAlignment = Enum.TextXAlignment.Left,
    Parent = watermarkOutline
})

-- Update watermark FPS
local fps = 0
RunService.Heartbeat:Connect(function(delta)
    fps = math.floor(1 / delta)
    watermarkText.Text = "example.lol | FPS: "..fps.." | "..player.Name
end)

-- Make watermark draggable
makeDraggable(watermark, watermarkOutline)

-- FOV CIRCLE
local function createFOVCircle()
    if FOVCircle then FOVCircle:Destroy() end
    
    FOVCircle = create("Frame", {
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundTransparency = 1,
        Size = UDim2.new(0, Settings.Combat.FOVSize * 2, 0, Settings.Combat.FOVSize * 2),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Parent = screenGui
    })
    
    local outline = create("ImageLabel", {
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Image = "rbxassetid://266543268",
        ImageColor3 = Settings.Combat.FOVOutlineColor,
        ImageTransparency = Settings.Combat.FOVOutlineTransparency / 100,
        Parent = FOVCircle
    })
    
    if Settings.Combat.FillFOV then
        local fill = create("ImageLabel", {
            AnchorPoint = Vector2.new(0.5, 0.5),
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 1, 0),
            Position = UDim2.new(0.5, 0, 0.5, 0),
            Image = "rbxassetid://266543268",
            ImageColor3 = Settings.Combat.FOVFillColor,
            ImageTransparency = Settings.Combat.FOVFillTransparency / 100,
            Parent = FOVCircle
        })
    end
    
    FOVCircle.Visible = Settings.Combat.UseFOV and Settings.Combat.DrawFOV
end

-- SILENT AIM FOV CIRCLE
local function createSilentFOVCircle()
    if SilentFOVCircle then SilentFOVCircle:Destroy() end
    
    SilentFOVCircle = create("Frame", {
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundTransparency = 1,
        Size = UDim2.new(0, Settings.Combat.SilentAim.FOVSize * 2, 0, Settings.Combat.SilentAim.FOVSize * 2),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Parent = screenGui
    })
    
    local outline = create("ImageLabel", {
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Image = "rbxassetid://266543268",
        ImageColor3 = Settings.Combat.SilentAim.FOVOutlineColor,
        ImageTransparency = Settings.Combat.SilentAim.FOVOutlineTransparency / 100,
        Parent = SilentFOVCircle
    })
    
    if Settings.Combat.SilentAim.FillFOV then
        local fill = create("ImageLabel", {
            AnchorPoint = Vector2.new(0.5, 0.5),
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 1, 0),
            Position = UDim2.new(0.5, 0, 0.5, 0),
            Image = "rbxassetid://266543268",
            ImageColor3 = Settings.Combat.SilentAim.FOVFillColor,
            ImageTransparency = Settings.Combat.SilentAim.FOVFillTransparency / 100,
            Parent = SilentFOVCircle
        })
    end
    
    SilentFOVCircle.Visible = Settings.Combat.SilentAim.UseFOV and Settings.Combat.SilentAim.DrawFOV
end

-- CROSSHAIR
local function createCrosshair()
    if Crosshair then Crosshair:Destroy() end
    
    Crosshair = create("Frame", {
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundTransparency = 1,
        Size = UDim2.new(0, 100, 0, 100),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Visible = Settings.Visuals.Effects.Crosshair,
        Parent = screenGui
    })
    
    local gap = Settings.Visuals.Effects.CrosshairGap
    local size = Settings.Visuals.Effects.CrosshairSize
    
    -- Top line
    local top = create("Frame", {
        AnchorPoint = Vector2.new(0.5, 1),
        BackgroundColor3 = Settings.Visuals.Effects.CrosshairColor,
        BorderSizePixel = 0,
        Size = UDim2.new(0, 1, 0, size),
        Position = UDim2.new(0.5, 0, 0.5, -gap),
        Parent = Crosshair
    })
    
    if Settings.Visuals.Effects.CrosshairOutline then
        create("UIStroke", {
            Color = Settings.Visuals.Effects.CrosshairOutlineColor,
            Thickness = 1,
            Parent = top
        })
    end
    
    -- Bottom line
    local bottom = create("Frame", {
        AnchorPoint = Vector2.new(0.5, 0),
        BackgroundColor3 = Settings.Visuals.Effects.CrosshairColor,
        BorderSizePixel = 0,
        Size = UDim2.new(0, 1, 0, size),
        Position = UDim2.new(0.5, 0, 0.5, gap),
        Parent = Crosshair
    })
    
    if Settings.Visuals.Effects.CrosshairOutline then
        create("UIStroke", {
            Color = Settings.Visuals.Effects.CrosshairOutlineColor,
            Thickness = 1,
            Parent = bottom
        })
    end
    
    -- Left line
    local left = create("Frame", {
        AnchorPoint = Vector2.new(1, 0.5),
        BackgroundColor3 = Settings.Visuals.Effects.CrosshairColor,
        BorderSizePixel = 0,
        Size = UDim2.new(0, size, 0, 1),
        Position = UDim2.new(0.5, -gap, 0.5, 0),
        Parent = Crosshair
    })
    
    if Settings.Visuals.Effects.CrosshairOutline then
        create("UIStroke", {
            Color = Settings.Visuals.Effects.CrosshairOutlineColor,
            Thickness = 1,
            Parent = left
        })
    end
    
    -- Right line
    local right = create("Frame", {
        AnchorPoint = Vector2.new(0, 0.5),
        BackgroundColor3 = Settings.Visuals.Effects.CrosshairColor,
        BorderSizePixel = 0,
        Size = UDim2.new(0, size, 0, 1),
        Position = UDim2.new(0.5, gap, 0.5, 0),
        Parent = Crosshair
    })
    
    if Settings.Visuals.Effects.CrosshairOutline then
        create("UIStroke", {
            Color = Settings.Visuals.Effects.CrosshairOutlineColor,
            Thickness = 1,
            Parent = right
        })
    end
    
    -- Spin animation
    if Settings.Visuals.Effects.CrosshairSpin then
        local spinSpeed = Settings.Visuals.Effects.CrosshairSpinSpeed
        RunService.Heartbeat:Connect(function(delta)
            Crosshair.Rotation = Crosshair.Rotation + spinSpeed * delta
        end)
    end
end

-- SNOW FLAKES
local function createSnowFlakes()
    for _, flake in pairs(SnowFlakes) do
        flake:Destroy()
    end
    SnowFlakes = {}
    
    if not Settings.Visuals.Effects.SnowFlakes then return end
    
    for i = 1, 50 do
        local flake = create("ImageLabel", {
            AnchorPoint = Vector2.new(0.5, 0.5),
            BackgroundTransparency = 1,
            Size = UDim2.new(0, math.random(10, 20), 0, math.random(10, 20)),
            Position = UDim2.new(0, math.random(0, screenGui.AbsoluteSize.X), 0, math.random(-100, 0)),
            Image = "rbxassetid://88697899861401",
            ImageTransparency = math.random(5, 8) / 10,
            Parent = screenGui
        })
        
        table.insert(SnowFlakes, flake)
        
        spawn(function()
            local speed = math.random(50, 100)
            local sway = math.random(5, 15)
            local swayDir = math.random() > 0.5 and 1 or -1
            
            while flake and flake.Parent do
                flake.Position = UDim2.new(
                    0, flake.AbsolutePosition.X + math.sin(tick() * sway) * swayDir,
                    0, flake.AbsolutePosition.Y + speed * 0.01
                )
                
                if flake.AbsolutePosition.Y > screenGui.AbsoluteSize.Y then
                    flake.Position = UDim2.new(
                        0, math.random(0, screenGui.AbsoluteSize.X),
                        0, -20
                    )
                end
                
                wait(0.01)
            end
        end)
    end
end

-- HELLO KITTIES
local function createHelloKitties()
    for _, kitty in pairs(HelloKitties) do
        kitty:Destroy()
    end
    HelloKitties = {}
    
    if not Settings.Visuals.Effects.HelloKitty then return end
    
    for i = 1, 20 do
        local kitty = create("ImageLabel", {
            AnchorPoint = Vector2.new(0.5, 0.5),
            BackgroundTransparency = 1,
            Size = UDim2.new(0, math.random(30, 50), 0, math.random(30, 50)),
            Position = UDim2.new(0, math.random(0, screenGui.AbsoluteSize.X), 0, math.random(-100, 0)),
            Image = "rbxassetid://119561339599069",
            ImageTransparency = math.random(3, 7) / 10,
            Parent = screenGui
        })
        
        table.insert(HelloKitties, kitty)
        
        spawn(function()
            local speed = math.random(30, 70)
            local sway = math.random(10, 20)
            local swayDir = math.random() > 0.5 and 1 or -1
            
            while kitty and kitty.Parent do
                kitty.Position = UDim2.new(
                    0, kitty.AbsolutePosition.X + math.sin(tick() * sway) * swayDir,
                    0, kitty.AbsolutePosition.Y + speed * 0.01
                )
                
                if kitty.AbsolutePosition.Y > screenGui.AbsoluteSize.Y then
                    kitty.Position = UDim2.new(
                        0, math.random(0, screenGui.AbsoluteSize.X),
                        0, -50
                    )
                end
                
                wait(0.01)
            end
        end)
    end
end

-- ESP FUNCTIONS
local function createESP(player)
    if ESPObjects[player] then return end
    
    local esp = {
        box = nil,
        name = nil,
        healthBar = nil,
        healthText = nil,
        tool = nil,
        distance = nil,
        chams = nil,
        skeleton = nil,
        tracers = {}
    }
    
    ESPObjects[player] = esp
    
    local function updateESP()
        if not player.Character or not player.Character:FindFirstChild("Humanoid") or not player.Character:FindFirstChild("HumanoidRootPart") then
            if esp.box then esp.box:Destroy() esp.box = nil end
            if esp.name then esp.name:Destroy() esp.name = nil end
            if esp.healthBar then esp.healthBar:Destroy() esp.healthBar = nil end
            if esp.healthText then esp.healthText:Destroy() esp.healthText = nil end
            if esp.tool then esp.tool:Destroy() esp.tool = nil end
            if esp.distance then esp.distance:Destroy() esp.distance = nil end
            if esp.chams then esp.chams:Destroy() esp.chams = nil end
            if esp.skeleton then esp.skeleton:Destroy() esp.skeleton = nil end
            return
        end
        
        local character = player.Character
        local humanoid = character.Humanoid
        local rootPart = character.HumanoidRootPart
        
        -- Calculate position on screen
        local pos, onScreen = camera:WorldToViewportPoint(rootPart.Position)
        local distance = (rootPart.Position - camera.CFrame.Position).Magnitude
        
        -- Check if player is too far
        if distance > Settings.Visuals.ESP.Distance then
            if esp.box then esp.box.Visible = false end
            if esp.name then esp.name.Visible = false end
            if esp.healthBar then esp.healthBar.Visible = false end
            if esp.healthText then esp.healthText.Visible = false end
            if esp.tool then esp.tool.Visible = false end
            if esp.distance then esp.distance.Visible = false end
            if esp.chams then esp.chams.Visible = false end
            if esp.skeleton then esp.skeleton.Visible = false end
            return
        end
        
        -- Calculate box size based on character size
        local size = Vector2.new(4, 5) * (1000 / distance)
        local boxSize = Vector2.new(math.clamp(size.X, 20, 150), math.clamp(size.Y, 30, 200))
        
        -- BOX ESP
        if Settings.Visuals.ESP.Enable and Settings.Visuals.ESP.BoxESP and onScreen then
            if not esp.box then
                esp.box = create("Frame", {
                    BackgroundTransparency = 1,
                    Size = UDim2.new(0, boxSize.X, 0, boxSize.Y),
                    Position = UDim2.new(0, pos.X - boxSize.X / 2, 0, pos.Y - boxSize.Y / 2),
                    Parent = screenGui
                })
                
                local outline = create("Frame", {
                    BackgroundColor3 = Settings.Visuals.ESP.BoxESPColor,
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, 0, 1, 0),
                    Parent = esp.box
                })
                
                if Settings.Visuals.ESP.BoxGlow then
                    create("UIStroke", {
                        Color = Settings.Visuals.ESP.BoxGlowColor,
                        Thickness = 2,
                        Transparency = 1 - (Settings.Visuals.ESP.GlowIntensity / 100),
                        Parent = outline
                    })
                end
            else
                esp.box.Visible = true
                esp.box.Size = UDim2.new(0, boxSize.X, 0, boxSize.Y)
                esp.box.Position = UDim2.new(0, pos.X - boxSize.X / 2, 0, pos.Y - boxSize.Y / 2)
            end
        elseif esp.box then
            esp.box.Visible = false
        end
        
        -- NAME ESP
        if Settings.Visuals.ESP.Enable and Settings.Visuals.ESP.NameESP and onScreen then
            if not esp.name then
                esp.name = create("TextLabel", {
                    BackgroundTransparency = 1,
                    Size = UDim2.new(0, 100, 0, 20),
                    Position = UDim2.new(0, pos.X - 50, 0, pos.Y - boxSize.Y / 2 - 20),
                    Font = Theme.Font,
                    Text = player.Name,
                    TextColor3 = Settings.Visuals.ESP.NameESPColor,
                    TextSize = 14,
                    TextStrokeTransparency = 0,
                    Parent = screenGui
                })
                
                if Settings.Visuals.ESP.NameOutline then
                    create("UIStroke", {
                        Color = Color3.new(0, 0, 0),
                        Thickness = 2,
                        Parent = esp.name
                    })
                end
                
                if Settings.Visuals.ESP.NameGlow then
                    create("UIGradient", {
                        Color = ColorSequence.new{
                            ColorSequenceKeypoint.new(0, Settings.Visuals.ESP.NameGlowColor),
                            ColorSequenceKeypoint.new(1, Settings.Visuals.ESP.NameESPColor)
                        },
                        Rotation = 90,
                        Parent = esp.name
                    })
                end
            else
                esp.name.Visible = true
                esp.name.Position = UDim2.new(0, pos.X - 50, 0, pos.Y - boxSize.Y / 2 - 20)
                esp.name.Text = player.Name
            end
        elseif esp.name then
            esp.name.Visible = false
        end
        
        -- HEALTH BAR ESP
        if Settings.Visuals.ESP.Enable and Settings.Visuals.ESP.HealthBarESP and onScreen then
            if not esp.healthBar then
                esp.healthBar = create("Frame", {
                    BackgroundTransparency = 1,
                    Size = UDim2.new(0, 5, 0, boxSize.Y),
                    Position = UDim2.new(0, pos.X - boxSize.X / 2 - 10, 0, pos.Y - boxSize.Y / 2),
                    Parent = screenGui
                })
                
                local bg = create("Frame", {
                    BackgroundColor3 = Settings.Visuals.ESP.HealthBarBGColor,
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, 0, 1, 0),
                    Parent = esp.healthBar
                })
                
                local fill = create("Frame", {
                    BackgroundColor3 = Settings.Visuals.ESP.HealthBarColor,
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, 0, humanoid.Health / humanoid.MaxHealth, 0),
                    Position = UDim2.new(0, 0, 1 - humanoid.Health / humanoid.MaxHealth, 0),
                    Parent = bg
                })
                
                if Settings.Visuals.ESP.HealthBarGlow then
                    create("UIStroke", {
                        Color = Settings.Visuals.ESP.HealthBarGlowColor,
                        Thickness = 1,
                        Transparency = 1 - (Settings.Visuals.ESP.GlowIntensity / 100),
                        Parent = fill
                    })
                end
                
                if Settings.Visuals.ESP.HealthNumber then
                    esp.healthText = create("TextLabel", {
                        BackgroundTransparency = 1,
                        Size = UDim2.new(0, 30, 0, 20),
                        Position = UDim2.new(0, -15, 1 - humanoid.Health / humanoid.MaxHealth, -10),
                        Font = Theme.Font,
                        Text = math.floor(humanoid.Health),
                        TextColor3 = Settings.Visuals.ESP.HealthNumberColor,
                        TextSize = 12,
                        TextStrokeTransparency = 0,
                        Parent = esp.healthBar
                    })
                end
            else
                esp.healthBar.Visible = true
                esp.healthBar.Position = UDim2.new(0, pos.X - boxSize.X / 2 - 10, 0, pos.Y - boxSize.Y / 2)
                
                local fill = esp.healthBar:FindFirstChild("Frame"):FindFirstChild("Frame")
                if fill then
                    fill.Size = UDim2.new(1, 0, humanoid.Health / humanoid.MaxHealth, 0)
                    fill.Position = UDim2.new(0, 0, 1 - humanoid.Health / humanoid.MaxHealth, 0)
                end
                
                if esp.healthText then
                    esp.healthText.Position = UDim2.new(0, -15, 1 - humanoid.Health / humanoid.MaxHealth, -10)
                    esp.healthText.Text = math.floor(humanoid.Health)
                end
            end
        elseif esp.healthBar then
            esp.healthBar.Visible = false
            if esp.healthText then esp.healthText.Visible = false end
        end
        
        -- TOOL ESP
        if Settings.Visuals.ESP.Enable and Settings.Visuals.ESP.ToolESP and onScreen then
            local tool = character:FindFirstChildOfClass("Tool")
            if tool then
                if not esp.tool then
                    esp.tool = create("TextLabel", {
                        BackgroundTransparency = 1,
                        Size = UDim2.new(0, 100, 0, 20),
                        Position = UDim2.new(0, pos.X - 50, 0, pos.Y + boxSize.Y / 2 + 5),
                        Font = Theme.Font,
                        Text = tool.Name,
                        TextColor3 = Settings.Visuals.ESP.ToolESPColor,
                        TextSize = 12,
                        TextStrokeTransparency = 0,
                        Parent = screenGui
                    })
                    
                    if Settings.Visuals.ESP.ToolOutline then
                        create("UIStroke", {
                            Color = Color3.new(0, 0, 0),
                            Thickness = 2,
                            Parent = esp.tool
                        })
                    end
                    
                    if Settings.Visuals.ESP.ToolGlow then
                        create("UIGradient", {
                            Color = ColorSequence.new{
                                ColorSequenceKeypoint.new(0, Settings.Visuals.ESP.ToolGlowColor),
                                ColorSequenceKeypoint.new(1, Settings.Visuals.ESP.ToolESPColor)
                            },
                            Rotation = 90,
                            Parent = esp.tool
                        })
                    end
                else
                    esp.tool.Visible = true
                    esp.tool.Position = UDim2.new(0, pos.X - 50, 0, pos.Y + boxSize.Y / 2 + 5)
                    esp.tool.Text = tool.Name
                end
            elseif esp.tool then
                esp.tool.Visible = false
            end
        elseif esp.tool then
            esp.tool.Visible = false
        end
        
        -- DISTANCE ESP
        if Settings.Visuals.ESP.Enable and Settings.Visuals.ESP.DistanceESP and onScreen then
            if not esp.distance then
                esp.distance = create("TextLabel", {
                    BackgroundTransparency = 1,
                    Size = UDim2.new(0, 100, 0, 20),
                    Position = UDim2.new(0, pos.X - 50, 0, pos.Y + boxSize.Y / 2 + 25),
                    Font = Theme.Font,
                    Text = math.floor(distance).." studs",
                    TextColor3 = Settings.Visuals.ESP.DistanceESPColor,
                    TextSize = 12,
                    TextStrokeTransparency = 0,
                    Parent = screenGui
                })
                
                if Settings.Visuals.ESP.DistanceOutline then
                    create("UIStroke", {
                        Color = Color3.new(0, 0, 0),
                        Thickness = 2,
                        Parent = esp.distance
                    })
                end
                
                if Settings.Visuals.ESP.DistanceGlow then
                    create("UIGradient", {
                        Color = ColorSequence.new{
                            ColorSequenceKeypoint.new(0, Settings.Visuals.ESP.DistanceGlowColor),
                            ColorSequenceKeypoint.new(1, Settings.Visuals.ESP.DistanceESPColor)
                        },
                        Rotation = 90,
                        Parent = esp.distance
                    })
                end
            else
                esp.distance.Visible = true
                esp.distance.Position = UDim2.new(0, pos.X - 50, 0, pos.Y + boxSize.Y / 2 + 25)
                esp.distance.Text = math.floor(distance).." studs"
            end
        elseif esp.distance then
            esp.distance.Visible = false
        end
        
        -- CHAMS ESP
        if Settings.Visuals.ESP.Enable and Settings.Visuals.ESP.ChamsESP and character then
            if not esp.chams then
                esp.chams = {}
                
                for _, part in pairs(character:GetDescendants()) do
                    if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                        local chams = create("BoxHandleAdornment", {
                            AlwaysOnTop = true,
                            ZIndex = 1,
                            Size = part.Size,
                            Color3 = Settings.Visuals.ESP.ChamsESPColor,
                            Transparency = 0.5,
                            Adornee = part,
                            Parent = part
                        })
                        
                        if Settings.Visuals.ESP.ChamsGlow then
                            create("UIGradient", {
                                Color = ColorSequence.new{
                                    ColorSequenceKeypoint.new(0, Settings.Visuals.ESP.ChamsGlowColor),
                                    ColorSequenceKeypoint.new(1, Settings.Visuals.ESP.ChamsESPColor)
                                },
                                Rotation = 90,
                                Parent = chams
                            })
                        end
                        
                        table.insert(esp.chams, chams)
                    end
                end
            else
                for _, chams in pairs(esp.chams) do
                    chams.Visible = true
                    chams.Color3 = Settings.Visuals.ESP.ChamsESPColor
                end
            end
        elseif esp.chams then
            for _, chams in pairs(esp.chams) do
                chams.Visible = false
            end
        end
        
        -- SKELETON ESP
        if Settings.Visuals.ESP.Enable and Settings.Visuals.ESP.SkeletonESP and character then
            if not esp.skeleton then
                esp.skeleton = {}
                
                local function createLine(part1, part2)
                    if not part1 or not part2 then return end
                    
                    local line = create("LineHandleAdornment", {
                        AlwaysOnTop = true,
                        ZIndex = 2,
                        Thickness = 1,
                        Color3 = Settings.Visuals.ESP.SkeletonESPColor,
                        Transparency = 0.3,
                        Adornee = part1,
                        Parent = part1
                    })
                    
                    RunService.Heartbeat:Connect(function()
                        if part1 and part2 then
                            line.Length = (part1.Position - part2.Position).Magnitude
                            line.CFrame = CFrame.new(part1.Position, part2.Position) * CFrame.new(0, 0, -line.Length / 2)
                        end
                    end)
                    
                    table.insert(esp.skeleton, line)
                end
                
                -- Create skeleton lines
                local head = character:FindFirstChild("Head")
                local torso = character:FindFirstChild("Torso") or character:FindFirstChild("UpperTorso")
                local leftArm = character:FindFirstChild("Left Arm") or character:FindFirstChild("LeftUpperArm")
                local rightArm = character:FindFirstChild("Right Arm") or character:FindFirstChild("RightUpperArm")
                local leftLeg = character:FindFirstChild("Left Leg") or character:FindFirstChild("LeftUpperLeg")
                local rightLeg = character:FindFirstChild("Right Leg") or character:FindFirstChild("RightUpperLeg")
                
                if head and torso then
                    createLine(head, torso)
                    
                    if leftArm then
                        createLine(torso, leftArm)
                        local leftLowerArm = character:FindFirstChild("LeftLowerArm") or character:FindFirstChild("Left Arm")
                        if leftLowerArm then
                            createLine(leftArm, leftLowerArm)
                            local leftHand = character:FindFirstChild("LeftHand") or character:FindFirstChild("Left Arm")
                            if leftHand then
                                createLine(leftLowerArm, leftHand)
                            end
                        end
                    end
                    
                    if rightArm then
                        createLine(torso, rightArm)
                        local rightLowerArm = character:FindFirstChild("RightLowerArm") or character:FindFirstChild("Right Arm")
                        if rightLowerArm then
                            createLine(rightArm, rightLowerArm)
                            local rightHand = character:FindFirstChild("RightHand") or character:FindFirstChild("Right Arm")
                            if rightHand then
                                createLine(rightLowerArm, rightHand)
                            end
                        end
                    end
                    
                    if leftLeg then
                        createLine(torso, leftLeg)
                        local leftLowerLeg = character:FindFirstChild("LeftLowerLeg") or character:FindFirstChild("Left Leg")
                        if leftLowerLeg then
                            createLine(leftLeg, leftLowerLeg)
                            local leftFoot = character:FindFirstChild("LeftFoot") or character:FindFirstChild("Left Leg")
                            if leftFoot then
                                createLine(leftLowerLeg, leftFoot)
                            end
                        end
                    end
                    
                    if rightLeg then
                        createLine(torso, rightLeg)
                        local rightLowerLeg = character:FindFirstChild("RightLowerLeg") or character:FindFirstChild("Right Leg")
                        if rightLowerLeg then
                            createLine(rightLeg, rightLowerLeg)
                            local rightFoot = character:FindFirstChild("RightFoot") or character:FindFirstChild("Right Leg")
                            if rightFoot then
                                createLine(rightLowerLeg, rightFoot)
                            end
                        end
                    end
                end
            else
                for _, line in pairs(esp.skeleton) do
                    line.Visible = true
                    line.Color3 = Settings.Visuals.ESP.SkeletonESPColor
                end
            end
        elseif esp.skeleton then
            for _, line in pairs(esp.skeleton) do
                line.Visible = false
            end
        end
    end
    
    -- Update ESP on character changes
    player.CharacterAdded:Connect(function(character)
        character:WaitForChild("Humanoid")
        character:WaitForChild("HumanoidRootPart")
        
        -- Clear old ESP
        if esp.box then esp.box:Destroy() esp.box = nil end
        if esp.name then esp.name:Destroy() esp.name = nil end
        if esp.healthBar then esp.healthBar:Destroy() esp.healthBar = nil end
        if esp.healthText then esp.healthText:Destroy() esp.healthText = nil end
        if esp.tool then esp.tool:Destroy() esp.tool = nil end
        if esp.distance then esp.distance:Destroy() esp.distance = nil end
        if esp.chams then 
            for _, chams in pairs(esp.chams) do
                chams:Destroy()
            end
            esp.chams = nil
        end
        if esp.skeleton then 
            for _, line in pairs(esp.skeleton) do
                line:Destroy()
            end
            esp.skeleton = nil
        end
        
        -- Create new ESP
        updateESP()
    end)
    
    -- Run initial ESP creation
    updateESP()
    
    -- Update ESP continuously
    RunService.Heartbeat:Connect(updateESP)
end

-- SELF ESP FUNCTIONS
local function createSelfESP()
    if ESPObjects[player] then return end
    
    local esp = {
        box = nil,
        name = nil,
        healthBar = nil,
        healthText = nil,
        tool = nil,
        distance = nil,
        chams = nil
    }
    
    ESPObjects[player] = esp
    
    local function updateESP()
        if not player.Character or not player.Character:FindFirstChild("Humanoid") or not player.Character:FindFirstChild("HumanoidRootPart") then
            if esp.box then esp.box:Destroy() esp.box = nil end
            if esp.name then esp.name:Destroy() esp.name = nil end
            if esp.healthBar then esp.healthBar:Destroy() esp.healthBar = nil end
            if esp.healthText then esp.healthText:Destroy() esp.healthText = nil end
            if esp.tool then esp.tool:Destroy() esp.tool = nil end
            if esp.distance then esp.distance:Destroy() esp.distance = nil end
            if esp.chams then esp.chams:Destroy() esp.chams = nil end
            return
        end
        
        local character = player.Character
        local humanoid = character.Humanoid
        local rootPart = character.HumanoidRootPart
        
        -- Calculate position on screen
        local pos, onScreen = camera:WorldToViewportPoint(rootPart.Position)
        local distance = (rootPart.Position - camera.CFrame.Position).Magnitude
        
        -- Check if player is too far
        if distance > Settings.Visuals.SelfESP.Distance then
            if esp.box then esp.box.Visible = false end
            if esp.name then esp.name.Visible = false end
            if esp.healthBar then esp.healthBar.Visible = false end
            if esp.healthText then esp.healthText.Visible = false end
            if esp.tool then esp.tool.Visible = false end
            if esp.distance then esp.distance.Visible = false end
            if esp.chams then esp.chams.Visible = false end
            return
        end
        
        -- Calculate box size based on character size
        local size = Vector2.new(4, 5) * (1000 / distance)
        local boxSize = Vector2.new(math.clamp(size.X, 20, 150), math.clamp(size.Y, 30, 200))
        
        -- BOX ESP
        if Settings.Visuals.SelfESP.Enable and Settings.Visuals.SelfESP.BoxESP and onScreen then
            if not esp.box then
                esp.box = create("Frame", {
                    BackgroundTransparency = 1,
                    Size = UDim2.new(0, boxSize.X, 0, boxSize.Y),
                    Position = UDim2.new(0, pos.X - boxSize.X / 2, 0, pos.Y - boxSize.Y / 2),
                    Parent = screenGui
                })
                
                local outline = create("Frame", {
                    BackgroundColor3 = Settings.Visuals.SelfESP.BoxESPColor,
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, 0, 1, 0),
                    Parent = esp.box
                })
                
                if Settings.Visuals.SelfESP.BoxGlow then
                    create("UIStroke", {
                        Color = Settings.Visuals.SelfESP.BoxGlowColor,
                        Thickness = 2,
                        Transparency = 1 - (Settings.Visuals.SelfESP.GlowIntensity / 100),
                        Parent = outline
                    })
                end
            else
                esp.box.Visible = true
                esp.box.Size = UDim2.new(0, boxSize.X, 0, boxSize.Y)
                esp.box.Position = UDim2.new(0, pos.X - boxSize.X / 2, 0, pos.Y - boxSize.Y / 2)
            end
        elseif esp.box then
            esp.box.Visible = false
        end
        
        -- NAME ESP
        if Settings.Visuals.SelfESP.Enable and Settings.Visuals.SelfESP.NameESP and onScreen then
            if not esp.name then
                esp.name = create("TextLabel", {
                    BackgroundTransparency = 1,
                    Size = UDim2.new(0, 100, 0, 20),
                    Position = UDim2.new(0, pos.X - 50, 0, pos.Y - boxSize.Y / 2 - 20),
                    Font = Theme.Font,
                    Text = player.Name,
                    TextColor3 = Settings.Visuals.SelfESP.NameESPColor,
                    TextSize = 14,
                    TextStrokeTransparency = 0,
                    Parent = screenGui
                })
                
                if Settings.Visuals.SelfESP.NameOutline then
                    create("UIStroke", {
                        Color = Color3.new(0, 0, 0),
                        Thickness = 2,
                        Parent = esp.name
                    })
                end
                
                if Settings.Visuals.SelfESP.NameGlow then
                    create("UIGradient", {
                        Color = ColorSequence.new{
                            ColorSequenceKeypoint.new(0, Settings.Visuals.SelfESP.NameGlowColor),
                            ColorSequenceKeypoint.new(1, Settings.Visuals.SelfESP.NameESPColor)
                        },
                        Rotation = 90,
                        Parent = esp.name
                    })
                end
            else
                esp.name.Visible = true
                esp.name.Position = UDim2.new(0, pos.X - 50, 0, pos.Y - boxSize.Y / 2 - 20)
                esp.name.Text = player.Name
            end
        elseif esp.name then
            esp.name.Visible = false
        end
        
        -- HEALTH BAR ESP
        if Settings.Visuals.SelfESP.Enable and Settings.Visuals.SelfESP.HealthBarESP and onScreen then
            if not esp.healthBar then
                esp.healthBar = create("Frame", {
                    BackgroundTransparency = 1,
                    Size = UDim2.new(0, 5, 0, boxSize.Y),
                    Position = UDim2.new(0, pos.X - boxSize.X / 2 - 10, 0, pos.Y - boxSize.Y / 2),
                    Parent = screenGui
                })
                
                local bg = create("Frame", {
                    BackgroundColor3 = Settings.Visuals.SelfESP.HealthBarBGColor,
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, 0, 1, 0),
                    Parent = esp.healthBar
                })
                
                local fill = create("Frame", {
                    BackgroundColor3 = Settings.Visuals.SelfESP.HealthBarColor,
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, 0, humanoid.Health / humanoid.MaxHealth, 0),
                    Position = UDim2.new(0, 0, 1 - humanoid.Health / humanoid.MaxHealth, 0),
                    Parent = bg
                })
                
                if Settings.Visuals.SelfESP.HealthBarGlow then
                    create("UIStroke", {
                        Color = Settings.Visuals.SelfESP.HealthBarGlowColor,
                        Thickness = 1,
                        Transparency = 1 - (Settings.Visuals.SelfESP.GlowIntensity / 100),
                        Parent = fill
                    })
                end
                
                if Settings.Visuals.SelfESP.HealthNumber then
                    esp.healthText = create("TextLabel", {
                        BackgroundTransparency = 1,
                        Size = UDim2.new(0, 30, 0, 20),
                        Position = UDim2.new(0, -15, 1 - humanoid.Health / humanoid.MaxHealth, -10),
                        Font = Theme.Font,
                        Text = math.floor(humanoid.Health),
                        TextColor3 = Settings.Visuals.SelfESP.HealthNumberColor,
                        TextSize = 12,
                        TextStrokeTransparency = 0,
                        Parent = esp.healthBar
                    })
                end
            else
                esp.healthBar.Visible = true
                esp.healthBar.Position = UDim2.new(0, pos.X - boxSize.X / 2 - 10, 0, pos.Y - boxSize.Y / 2)
                
                local fill = esp.healthBar:FindFirstChild("Frame"):FindFirstChild("Frame")
                if fill then
                    fill.Size = UDim2.new(1, 0, humanoid.Health / humanoid.MaxHealth, 0)
                    fill.Position = UDim2.new(0, 0, 1 - humanoid.Health / humanoid.MaxHealth, 0)
                end
                
                if esp.healthText then
                    esp.healthText.Position = UDim2.new(0, -15, 1 - humanoid.Health / humanoid.MaxHealth, -10)
                    esp.healthText.Text = math.floor(humanoid.Health)
                end
            end
        elseif esp.healthBar then
            esp.healthBar.Visible = false
            if esp.healthText then esp.healthText.Visible = false end
        end
        
        -- TOOL ESP
        if Settings.Visuals.SelfESP.Enable and Settings.Visuals.SelfESP.ToolESP and onScreen then
            local tool = character:FindFirstChildOfClass("Tool")
            if tool then
                if not esp.tool then
                    esp.tool = create("TextLabel", {
                        BackgroundTransparency = 1,
                        Size = UDim2.new(0, 100, 0, 20),
                        Position = UDim2.new(0, pos.X - 50, 0, pos.Y + boxSize.Y / 2 + 5),
                        Font = Theme.Font,
                        Text = tool.Name,
                        TextColor3 = Settings.Visuals.SelfESP.ToolESPColor,
                        TextSize = 12,
                        TextStrokeTransparency = 0,
                        Parent = screenGui
                    })
                    
                    if Settings.Visuals.SelfESP.ToolOutline then
                        create("UIStroke", {
                            Color = Color3.new(0, 0, 0),
                            Thickness = 2,
                            Parent = esp.tool
                        })
                    end
                    
                    if Settings.Visuals.SelfESP.ToolGlow then
                        create("UIGradient", {
                            Color = ColorSequence.new{
                                ColorSequenceKeypoint.new(0, Settings.Visuals.SelfESP.ToolGlowColor),
                                ColorSequenceKeypoint.new(1, Settings.Visuals.SelfESP.ToolESPColor)
                            },
                            Rotation = 90,
                            Parent = esp.tool
                        })
                    end
                else
                    esp.tool.Visible = true
                    esp.tool.Position = UDim2.new(0, pos.X - 50, 0, pos.Y + boxSize.Y / 2 + 5)
                    esp.tool.Text = tool.Name
                end
            elseif esp.tool then
                esp.tool.Visible = false
            end
        elseif esp.tool then
            esp.tool.Visible = false
        end
        
        -- DISTANCE ESP
        if Settings.Visuals.SelfESP.Enable and Settings.Visuals.SelfESP.DistanceESP and onScreen then
            if not esp.distance then
                esp.distance = create("TextLabel", {
                    BackgroundTransparency = 1,
                    Size = UDim2.new(0, 100, 0, 20),
                    Position = UDim2.new(0, pos.X - 50, 0, pos.Y + boxSize.Y / 2 + 25),
                    Font = Theme.Font,
                    Text = math.floor(distance).." studs",
                    TextColor3 = Settings.Visuals.SelfESP.DistanceESPColor,
                    TextSize = 12,
                    TextStrokeTransparency = 0,
                    Parent = screenGui
                })
                
                if Settings.Visuals.SelfESP.DistanceOutline then
                    create("UIStroke", {
                        Color = Color3.new(0, 0, 0),
                        Thickness = 2,
                        Parent = esp.distance
                    })
                end
                
                if Settings.Visuals.SelfESP.DistanceGlow then
                    create("UIGradient", {
                        Color = ColorSequence.new{
                            ColorSequenceKeypoint.new(0, Settings.Visuals.SelfESP.DistanceGlowColor),
                            ColorSequenceKeypoint.new(1, Settings.Visuals.SelfESP.DistanceESPColor)
                        },
                        Rotation = 90,
                        Parent = esp.distance
                    })
                end
            else
                esp.distance.Visible = true
                esp.distance.Position = UDim2.new(0, pos.X - 50, 0, pos.Y + boxSize.Y / 2 + 25)
                esp.distance.Text = math.floor(distance).." studs"
            end
        elseif esp.distance then
            esp.distance.Visible = false
        end
        
        -- CHAMS ESP
        if Settings.Visuals.SelfESP.Enable and Settings.Visuals.SelfESP.ChamsESP and character then
            if not esp.chams then
                esp.chams = {}
                
                for _, part in pairs(character:GetDescendants()) do
                    if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                        local chams = create("BoxHandleAdornment", {
                            AlwaysOnTop = true,
                            ZIndex = 1,
                            Size = part.Size,
                            Color3 = Settings.Visuals.SelfESP.ChamsESPColor,
                            Transparency = 0.5,
                            Adornee = part,
                            Parent = part
                        })
                        
                        if Settings.Visuals.SelfESP.ChamsGlow then
                            create("UIGradient", {
                                Color = ColorSequence.new{
                                    ColorSequenceKeypoint.new(0, Settings.Visuals.SelfESP.ChamsGlowColor),
                                    ColorSequenceKeypoint.new(1, Settings.Visuals.SelfESP.ChamsESPColor)
                                },
                                Rotation = 90,
                                Parent = chams
                            })
                        end
                        
                        table.insert(esp.chams, chams)
                    end
                end
            else
                for _, chams in pairs(esp.chams) do
                    chams.Visible = true
                    chams.Color3 = Settings.Visuals.SelfESP.ChamsESPColor
                end
            end
        elseif esp.chams then
            for _, chams in pairs(esp.chams) do
                chams.Visible = false
            end
        end
    end
    
    -- Update ESP on character changes
    player.CharacterAdded:Connect(function(character)
        character:WaitForChild("Humanoid")
        character:WaitForChild("HumanoidRootPart")
        
        -- Clear old ESP
        if esp.box then esp.box:Destroy() esp.box = nil end
        if esp.name then esp.name:Destroy() esp.name = nil end
        if esp.healthBar then esp.healthBar:Destroy() esp.healthBar = nil end
        if esp.healthText then esp.healthText:Destroy() esp.healthText = nil end
        if esp.tool then esp.tool:Destroy() esp.tool = nil end
        if esp.distance then esp.distance:Destroy() esp.distance = nil end
        if esp.chams then 
            for _, chams in pairs(esp.chams) do
                chams:Destroy()
            end
            esp.chams = nil
        end
        
        -- Create new ESP
        updateESP()
    end)
    
    -- Run initial ESP creation
    updateESP()
    
    -- Update ESP continuously
    RunService.Heartbeat:Connect(updateESP)
end

-- WORLD VISUALS
local function updateWorldVisuals()
    -- Ambience
    if Settings.Visuals.World.AmbienceColor then
        Lighting.Ambient = Settings.Visuals.World.AmbienceColorValue
        if Settings.Visuals.World.AmbienceGlow then
            Lighting.OutdoorAmbient = Settings.Visuals.World.AmbienceGlowColor
        else
            Lighting.OutdoorAmbient = Color3.fromRGB(127, 127, 127)
        end
    else
        Lighting.Ambient = Color3.fromRGB(0.5, 0.5, 0.5)
        Lighting.OutdoorAmbient = Color3.fromRGB(127, 127, 127)
    end
    
    -- Building color (this would require modifying parts in workspace)
    -- Not implemented as it would be too resource intensive
    
    -- Fog
    if Settings.Visuals.World.FogColor then
        Lighting.FogColor = Settings.Visuals.World.FogColorValue
        Lighting.FogStart = Settings.Visuals.World.FogStart
        Lighting.FogEnd = Settings.Visuals.World.FogEnd
        if Settings.Visuals.World.FogGlow then
            -- Not sure what to do for fog glow, maybe add a subtle light?
        end
    else
        Lighting.FogColor = Color3.fromRGB(191, 191, 191)
        Lighting.FogStart = 0
        Lighting.FogEnd = 100000
    end
    
    -- Screen color overlay
    if Settings.Visuals.World.ScreenColor then
        if not screenGui:FindFirstChild("ScreenOverlay") then
            local overlay = create("Frame", {
                Name = "ScreenOverlay",
                BackgroundColor3 = Settings.Visuals.World.ScreenColorValue,
                BackgroundTransparency = 0.5,
                Size = UDim2.new(1, 0, 1, 0),
                Position = UDim2.new(0, 0, 0, 0),
                Parent = screenGui
            })
        else
            screenGui.ScreenOverlay.BackgroundColor3 = Settings.Visuals.World.ScreenColorValue
        end
    elseif screenGui:FindFirstChild("ScreenOverlay") then
        screenGui.ScreenOverlay:Destroy()
    end
end

-- BULLET TRACERS
local function createBulletTracers()
    local function onCharacterAdded(character)
        local humanoid = character:WaitForChild("Humanoid")
        
        humanoid:GetPropertyChangedSignal("Health"):Connect(function()
            if humanoid.Health <= 0 then return end
            
            -- Check if this is our character or enemy
            local isSelf = character == player.Character
            local shouldTrace = (isSelf and Settings.Visuals.Effects.SelfBulletTracer) or 
                              (not isSelf and Settings.Visuals.Effects.EnemyBulletTracer)
            
            if shouldTrace then
                local rootPart = character:FindFirstChild("HumanoidRootPart")
                if rootPart then
                    local tracer = create("Beam", {
                        Color = isSelf and Settings.Visuals.Effects.SelfBulletTracerColor or 
                                Settings.Visuals.Effects.EnemyBulletTracerColor,
                        Width0 = Settings.Visuals.Effects.BulletStartSize,
                        Width1 = Settings.Visuals.Effects.BulletEndSize,
                        Parent = Workspace.CurrentCamera
                    })
                    
                    -- Set attachment points
                    local attachment0 = create("Attachment", {
                        Parent = Workspace.CurrentCamera
                    })
                    
                    local attachment1 = create("Attachment", {
                        Parent = rootPart
                    })
                    
                    tracer.Attachment0 = attachment0
                    tracer.Attachment1 = attachment1
                    
                    -- Fade out and destroy
                    delay(Settings.Visuals.Effects.BulletDuration, function()
                        for i = 1, 10 do
                            if tracer then
                                tracer.Transparency = NumberSequence.new(i / 10)
                                wait(0.05)
                            end
                        end
                        if attachment0 then attachment0:Destroy() end
                        if attachment1 then attachment1:Destroy() end
                        if tracer then tracer:Destroy() end
                    end)
                end
            end
        end)
    end
    
    -- Connect to existing players
    for _, player in pairs(Players:GetPlayers()) do
        if player.Character then
            onCharacterAdded(player.Character)
        end
        player.CharacterAdded:Connect(onCharacterAdded)
    end
    
    -- Connect to new players
    Players.PlayerAdded:Connect(function(player)
        player.CharacterAdded:Connect(onCharacterAdded)
    end)
end

-- HIT SKELETON
local function createHitSkeleton()
    local function onCharacterAdded(character)
        local humanoid = character:WaitForChild("Humanoid")
        
        humanoid:GetPropertyChangedSignal("Health"):Connect(function()
            if humanoid.Health <= 0 then return end
            
            if Settings.Visuals.Effects.HitSkeleton then
                -- Create temporary skeleton
                local skeleton = {}
                
                local function createLine(part1, part2)
                    if not part1 or not part2 then return end
                    
                    local line = create("LineHandleAdornment", {
                        AlwaysOnTop = true,
                        ZIndex = 2,
                        Thickness = 1,
                        Color3 = Settings.Visuals.Effects.HitSkeletonColor,
                        Transparency = 0.3,
                        Adornee = part1,
                        Parent = part1
                    })
                    
                    RunService.Heartbeat:Connect(function()
                        if part1 and part2 then
                            line.Length = (part1.Position - part2.Position).Magnitude
                            line.CFrame = CFrame.new(part1.Position, part2.Position) * CFrame.new(0, 0, -line.Length / 2)
                        end
                    end)
                    
                    table.insert(skeleton, line)
                end
                
                -- Create skeleton lines
                local head = character:FindFirstChild("Head")
                local torso = character:FindFirstChild("Torso") or character:FindFirstChild("UpperTorso")
                local leftArm = character:FindFirstChild("Left Arm") or character:FindFirstChild("LeftUpperArm")
                local rightArm = character:FindFirstChild("Right Arm") or character:FindFirstChild("RightUpperArm")
                local leftLeg = character:FindFirstChild("Left Leg") or character:FindFirstChild("LeftUpperLeg")
                local rightLeg = character:FindFirstChild("Right Leg") or character:FindFirstChild("RightUpperLeg")
                
                if head and torso then
                    createLine(head, torso)
                    
                    if leftArm then
                        createLine(torso, leftArm)
                        local leftLowerArm = character:FindFirstChild("LeftLowerArm") or character:FindFirstChild("Left Arm")
                        if leftLowerArm then
                            createLine(leftArm, leftLowerArm)
                            local leftHand = character:FindFirstChild("LeftHand") or character:FindFirstChild("Left Arm")
                            if leftHand then
                                createLine(leftLowerArm, leftHand)
                            end
                        end
                    end
                    
                    if rightArm then
                        createLine(torso, rightArm)
                        local rightLowerArm = character:FindFirstChild("RightLowerArm") or character:FindFirstChild("Right Arm")
                        if rightLowerArm then
                            createLine(rightArm, rightLowerArm)
                            local rightHand = character:FindFirstChild("RightHand") or character:FindFirstChild("Right Arm")
                            if rightHand then
                                createLine(rightLowerArm, rightHand)
                            end
                        end
                    end
                    
                    if leftLeg then
                        createLine(torso, leftLeg)
                        local leftLowerLeg = character:FindFirstChild("LeftLowerLeg") or character:FindFirstChild("Left Leg")
                        if leftLowerLeg then
                            createLine(leftLeg, leftLowerLeg)
                            local leftFoot = character:FindFirstChild("LeftFoot") or character:FindFirstChild("Left Leg")
                            if leftFoot then
                                createLine(leftLowerLeg, leftFoot)
                            end
                        end
                    end
                    
                    if rightLeg then
                        createLine(torso, rightLeg)
                        local rightLowerLeg = character:FindFirstChild("RightLowerLeg") or character:FindFirstChild("Right Leg")
                        if rightLowerLeg then
                            createLine(rightLeg, rightLowerLeg)
                            local rightFoot = character:FindFirstChild("RightFoot") or character:FindFirstChild("Right Leg")
                            if rightFoot then
                                createLine(rightLowerLeg, rightFoot)
                            end
                        end
                    end
                end
                
                -- Glow effect
                if Settings.Visuals.Effects.HitSkeletonGlow then
                    for _, line in pairs(skeleton) do
                        create("UIGradient", {
                            Color = ColorSequence.new{
                                ColorSequenceKeypoint.new(0, Settings.Visuals.Effects.HitSkeletonGlowColor),
                                ColorSequenceKeypoint.new(1, Settings.Visuals.Effects.HitSkeletonColor)
                            },
                            Rotation = 90,
                            Parent = line
                        })
                    end
                end
                
                -- Remove after 1 second
                delay(1, function()
                    for _, line in pairs(skeleton) do
                        line:Destroy()
                    end
                end)
            end
        end)
    end
    
    -- Connect to existing players
    for _, player in pairs(Players:GetPlayers()) do
        if player.Character then
            onCharacterAdded(player.Character)
        end
        player.CharacterAdded:Connect(onCharacterAdded)
    end
    
    -- Connect to new players
    Players.PlayerAdded:Connect(function(player)
        player.CharacterAdded:Connect(onCharacterAdded)
    end)
end

-- TARGET TRACER
local function createTargetTracer()
    if not Settings.Combat.TargetTracer then
        if ESPObjects[player] and ESPObjects[player].tracers then
            for _, tracer in pairs(ESPObjects[player].tracers) do
                tracer:Destroy()
            end
            ESPObjects[player].tracers = {}
        end
        return
    end
    
    if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then return end
    
    if not ESPObjects[player] then ESPObjects[player] = { tracers = {} } end
    
    -- Clear old tracers
    for _, tracer in pairs(ESPObjects[player].tracers) do
        tracer:Destroy()
    end
    ESPObjects[player].tracers = {}
    
    -- Create new tracer
    local tracer = create("Frame", {
        BackgroundColor3 = Settings.Combat.TargetTracerColor,
        BorderSizePixel = 0,
        Size = UDim2.new(0, 1, 0, 1),
        Parent = screenGui
    })
    
    table.insert(ESPObjects[player].tracers, tracer)
    
    -- Update tracer position
    RunService.Heartbeat:Connect(function()
        if not Settings.Combat.TargetTracer or not currentTarget or not currentTarget.Character or 
           not currentTarget.Character:FindFirstChild("HumanoidRootPart") then
            tracer.Visible = false
            return
        end
        
        local targetPos = currentTarget.Character.HumanoidRootPart.Position
        local screenPos, onScreen = camera:WorldToViewportPoint(targetPos)
        
        if onScreen then
            tracer.Visible = true
            tracer.Position = UDim2.new(0, screenPos.X, 0, screenPos.Y)
            tracer.Size = UDim2.new(0, 100, 0, 1)
            tracer.Rotation = math.deg(math.atan2(
                screenPos.Y - camera.ViewportSize.Y/2,
                screenPos.X - camera.ViewportSize.X/2
            )) + 90
        else
            tracer.Visible = false
        end
    end)
end

-- TARGET HEAD DOT
local function createTargetHeadDot()
    if not Settings.Combat.TargetHeadDot then
        if ESPObjects[player] and ESPObjects[player].headDot then
            ESPObjects[player].headDot:Destroy()
            ESPObjects[player].headDot = nil
        end
        return
    end
    
    if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then return end
    
    if not ESPObjects[player] then ESPObjects[player] = {} end
    
    -- Clear old head dot
    if ESPObjects[player].headDot then
        ESPObjects[player].headDot:Destroy()
        ESPObjects[player].headDot = nil
    end
    
    -- Create new head dot
    local headDot = create("Frame", {
        BackgroundColor3 = Settings.Combat.TargetHeadDotColor,
        BorderSizePixel = 0,
        Size = UDim2.new(0, 5, 0, 5),
        Parent = screenGui
    })
    
    create("UICorner", {
        CornerRadius = UDim.new(1, 0),
        Parent = headDot
    })
    
    ESPObjects[player].headDot = headDot
    
    -- Update head dot position
    RunService.Heartbeat:Connect(function()
        if not Settings.Combat.TargetHeadDot or not currentTarget or not currentTarget.Character or 
           not currentTarget.Character:FindFirstChild("Head") then
            headDot.Visible = false
            return
        end
        
        local headPos = currentTarget.Character.Head.Position
        local screenPos, onScreen = camera:WorldToViewportPoint(headPos)
        
        if onScreen then
            headDot.Visible = true
            headDot.Position = UDim2.new(0, screenPos.X - 2.5, 0, screenPos.Y - 2.5)
        else
            headDot.Visible = false
        end
    end)
end

-- TARGET INFO BOX
local function createTargetInfoBox()
    if not Settings.Combat.TargetInfoBox then
        if ESPObjects[player] and ESPObjects[player].infoBox then
            ESPObjects[player].infoBox:Destroy()
            ESPObjects[player].infoBox = nil
        end
        return
    end
    
    if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then return end
    
    if not ESPObjects[player] then ESPObjects[player] = {} end
    
    -- Clear old info box
    if ESPObjects[player].infoBox then
        ESPObjects[player].infoBox:Destroy()
        ESPObjects[player].infoBox = nil
    end
    
    -- Create new info box
    local infoBox = create("Frame", {
        BackgroundColor3 = Color3.fromRGB(20, 20, 20),
        BorderColor3 = Settings.Combat.TargetInfoBoxColor,
        BorderSizePixel = 1,
        Size = UDim2.new(0, 150, 0, 80),
        Parent = screenGui
    })
    
    local nameLabel = create("TextLabel", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, -10, 0, 20),
        Position = UDim2.new(0, 5, 0, 5),
        Font = Theme.Font,
        Text = "Target: "..(currentTarget and currentTarget.Name or "None"),
        TextColor3 = Settings.Combat.TargetInfoBoxColor,
        TextSize = 12,
        TextStrokeTransparency = 0,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = infoBox
    })
    
    local healthLabel = create("TextLabel", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, -10, 0, 20),
        Position = UDim2.new(0, 5, 0, 25),
        Font = Theme.Font,
        Text = "Health: "..(currentTarget and currentTarget.Character and 
              math.floor(currentTarget.Character.Humanoid.Health).."/"..
              math.floor(currentTarget.Character.Humanoid.MaxHealth) or "N/A"),
        TextColor3 = Settings.Combat.TargetInfoBoxColor,
        TextSize = 12,
        TextStrokeTransparency = 0,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = infoBox
    })
    
    local distanceLabel = create("TextLabel", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, -10, 0, 20),
        Position = UDim2.new(0, 5, 0, 45),
        Font = Theme.Font,
        Text = "Distance: "..(currentTarget and currentTarget.Character and 
              math.floor((currentTarget.Character.HumanoidRootPart.Position - 
              player.Character.HumanoidRootPart.Position).Magnitude).." studs" or "N/A"),
        TextColor3 = Settings.Combat.TargetInfoBoxColor,
        TextSize = 12,
        TextStrokeTransparency = 0,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = infoBox
    })
    
    ESPObjects[player].infoBox = infoBox
    
    -- Update info box position and info
    RunService.Heartbeat:Connect(function()
        if not Settings.Combat.TargetInfoBox or not currentTarget or not currentTarget.Character or 
           not currentTarget.Character:FindFirstChild("Humanoid") or not currentTarget.Character:FindFirstChild("HumanoidRootPart") then
            infoBox.Visible = false
            return
        end
        
        local rootPos = currentTarget.Character.HumanoidRootPart.Position
        local screenPos, onScreen = camera:WorldToViewportPoint(rootPos)
        
        if onScreen then
            infoBox.Visible = true
            infoBox.Position = UDim2.new(0, screenPos.X - 75, 0, screenPos.Y + 50)
            
            -- Update info
            nameLabel.Text = "Target: "..currentTarget.Name
            healthLabel.Text = "Health: "..math.floor(currentTarget.Character.Humanoid.Health).."/"..
                              math.floor(currentTarget.Character.Humanoid.MaxHealth)
            distanceLabel.Text = "Distance: "..math.floor((currentTarget.Character.HumanoidRootPart.Position - 
                                 player.Character.HumanoidRootPart.Position).Magnitude).." studs"
        else
            infoBox.Visible = false
        end
    end)
end

-- TARGET GLOW CHAMS
local function createTargetGlowChams()
    if not Settings.Combat.TargetGlowChams then
        if ESPObjects[player] and ESPObjects[player].glowChams then
            for _, cham in pairs(ESPObjects[player].glowChams) do
                cham:Destroy()
            end
            ESPObjects[player].glowChams = {}
        end
        return
    end
    
    if not currentTarget or not currentTarget.Character then return end
    
    if not ESPObjects[player] then ESPObjects[player] = { glowChams = {} } end
    
    -- Clear old chams
    for _, cham in pairs(ESPObjects[player].glowChams) do
        cham:Destroy()
    end
    ESPObjects[player].glowChams = {}
    
    -- Create new chams
    for _, part in pairs(currentTarget.Character:GetDescendants()) do
        if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
            local cham = create("BoxHandleAdornment", {
                AlwaysOnTop = true,
                ZIndex = 1,
                Size = part.Size,
                Color3 = Settings.Combat.TargetGlowChamsColor,
                Transparency = 0.5,
                Adornee = part,
                Parent = part
            })
            
            table.insert(ESPObjects[player].glowChams, cham)
        end
    end
    
    -- Update when character changes
    currentTarget.CharacterAdded:Connect(function(character)
        character:WaitForChild("Humanoid")
        
        -- Clear old chams
        for _, cham in pairs(ESPObjects[player].glowChams) do
            cham:Destroy()
        end
        ESPObjects[player].glowChams = {}
        
        -- Create new chams
        for _, part in pairs(character:GetDescendants()) do
            if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                local cham = create("BoxHandleAdornment", {
                    AlwaysOnTop = true,
                    ZIndex = 1,
                    Size = part.Size,
                    Color3 = Settings.Combat.TargetGlowChamsColor,
                    Transparency = 0.5,
                    Adornee = part,
                    Parent = part
                })
                
                table.insert(ESPObjects[player].glowChams, cham)
            end
        end
    end)
end

-- HIT SOUNDS
local hitSounds = {
    ["None"] = nil,
    ["Neverlose"] = "rbxassetid://97643101798871",
    ["Rust Headshot"] = "rbxassetid://5043539486",
    ["Rust Hitsound"] = "rbxassetid://96170170666605",
    ["MW2019"] = "rbxassetid://7172056822",
    ["Coin1"] = "rbxassetid://6792279908",
    ["Coin2"] = "rbxassetid://3125624765"
}

local function playHitSound()
    if Settings.Combat.HitSound == "None" or not hitSounds[Settings.Combat.HitSound] then return end
    
    local sound = Instance.new("Sound")
    sound.SoundId = hitSounds[Settings.Combat.HitSound]
    sound.Parent = Workspace
    sound:Play()
    delay(5, function() sound:Destroy() end)
end

-- AIMBOT FUNCTIONS
local function getClosestPlayer()
    if not Settings.Combat.Enable then return nil end
    
    local closestPlayer = nil
    local closestDistance = math.huge
    
    for _, target in pairs(Players:GetPlayers()) do
        -- Skip if target is ourselves or dead
        if target == player or not target.Character or not target.Character:FindFirstChild("Humanoid") or 
           target.Character.Humanoid.Health <= 0 then
            continue
        end
        
        -- Team check
        if Settings.Combat.Checks.TeamCheck and target.Team == player.Team then
            continue
        end
        
        -- Wall check
        if Settings.Combat.Checks.WallCheck then
            local raycastParams = RaycastParams.new()
            raycastParams.FilterDescendantsInstances = {player.Character, target.Character}
            raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
            
            local raycastResult = Workspace:Raycast(
                camera.CFrame.Position,
                (target.Character.HumanoidRootPart.Position - camera.CFrame.Position).Unit * 1000,
                raycastParams
            )
            
            if raycastResult and raycastResult.Instance:IsDescendantOf(target.Character) == false then
                continue
            end
        end
        
        -- Check if target is in FOV
        local targetPos = target.Character[Settings.Combat.HitPart].Position
        local screenPos, onScreen = camera:WorldToViewportPoint(targetPos)
        
        if Settings.Combat.UseFOV and onScreen then
            local center = Vector2.new(camera.ViewportSize.X/2, camera.ViewportSize.Y/2)
            local mousePos = Vector2.new(screenPos.X, screenPos.Y)
            local distance = (mousePos - center).Magnitude
            
            if distance > Settings.Combat.FOVSize then
                continue
            end
        end
        
        -- Calculate distance
        local distance = (targetPos - player.Character.HumanoidRootPart.Position).Magnitude
        
        if distance < closestDistance then
            closestPlayer = target
            closestDistance = distance
        end
    end
    
    return closestPlayer
end

local function aimAt(targetPart)
    if not targetPart then return end
    
    local targetPos = targetPart.Position
    
    -- Apply prediction
    if Settings.Combat.UsePrediction then
        local velocity = targetPart.AssemblyLinearVelocity
        targetPos = targetPos + (velocity * Settings.Combat.XPrediction / 100)
    end
    
    -- Apply offset
    if Settings.Combat.UseCustomOffset then
        targetPos = targetPos + Vector3.new(Settings.Combat.XOffset, Settings.Combat.YOffset, 0)
    end
    
    -- Calculate direction
    local direction = (targetPos - camera.CFrame.Position).Unit
    
    -- Smooth aiming
    if Settings.Combat.UseSmoothness then
        local currentLook = camera.CFrame.LookVector
        local smoothX = math.clamp((direction.X - currentLook.X) * (Settings.Combat.XSmoothness / 100), -1, 1)
        local smoothY = math.clamp((direction.Y - currentLook.Y) * (Settings.Combat.YSmoothness / 100), -1, 1)
        direction = (currentLook + Vector3.new(smoothX, smoothY, 0)).Unit
    end
    
    -- Aim based on type
    if Settings.Combat.AimType == "Mouse" then
        local screenPos = camera:WorldToViewportPoint(targetPos)
        mousemoverel(
            (screenPos.X - mouse.X) * (Settings.Combat.XSmoothness / 100),
            (screenPos.Y - mouse.Y) * (Settings.Combat.YSmoothness / 100)
        )
    else -- Camera
        camera.CFrame = CFrame.lookAt(camera.CFrame.Position, camera.CFrame.Position + direction)
    end
end

-- SILENT AIM FUNCTIONS
local function silentAimCheck(target)
    if not Settings.Combat.SilentAim.Enable then return false end
    
    -- Team check
    if Settings.Combat.SilentAim.TeamCheck and target.Team == player.Team then
        return false
    end
    
    -- Wall check
    if Settings.Combat.SilentAim.WallCheck then
        local raycastParams = RaycastParams.new()
        raycastParams.FilterDescendantsInstances = {player.Character, target.Character}
        raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
        
        local raycastResult = Workspace:Raycast(
            camera.CFrame.Position,
            (target.Character.HumanoidRootPart.Position - camera.CFrame.Position).Unit * 1000,
            raycastParams
        )
        
        if raycastResult and raycastResult.Instance:IsDescendantOf(target.Character) == false then
            return false
        end
    end
    
    -- FOV check
    if Settings.Combat.SilentAim.UseFOV then
        local targetPos = target.Character[Settings.Combat.SilentAim.HitParts[1]].Position
        local screenPos, onScreen = camera:WorldToViewportPoint(targetPos)
        
        if onScreen then
            local center = Vector2.new(camera.ViewportSize.X/2, camera.ViewportSize.Y/2)
            local mousePos = Vector2.new(screenPos.X, screenPos.Y)
            local distance = (mousePos - center).Magnitude
            
            if distance > Settings.Combat.SilentAim.FOVSize then
                return false
            end
        else
            return false
        end
    end
    
    -- Hit chance
    if math.random(1, 100) > Settings.Combat.SilentAim.HitChance then
        return false
    end
    
    return true
end

-- ORBIT LOCK FUNCTIONS
local function orbitLock(target)
    if not Settings.Combat.OrbitLock.Enable or not target or not target.Character then return end
    
    local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end
    
    -- Calculate orbit position
    orbitAngle = orbitAngle + 0.01
    if orbitAngle > 2 * math.pi then
        orbitAngle = 0
    end
    
    local offset = Vector3.new(
        math.cos(orbitAngle) * 5 + Settings.Combat.OrbitLock.XOffset,
        Settings.Combat.OrbitLock.YOffset,
        math.sin(orbitAngle) * 5
    )
    
    local targetPos = target.Character[Settings.Combat.OrbitLock.HitPart].Position + offset
    
    -- Move to orbit position
    player.Character.HumanoidRootPart.CFrame = CFrame.new(targetPos, target.Character.HumanoidRootPart.Position)
    
    -- Look at target
    if Settings.Combat.OrbitLock.LookAtTarget then
        humanoid.AutoRotate = false
        player.Character.HumanoidRootPart.CFrame = CFrame.new(
            player.Character.HumanoidRootPart.Position,
            target.Character.HumanoidRootPart.Position
        )
    else
        humanoid.AutoRotate = true
    end
    
    -- Spectate
    if Settings.Combat.OrbitLock.Spectate then
        camera.CameraSubject = target.Character.Humanoid
    else
        camera.CameraSubject = player.Character.Humanoid
    end
end

-- FLY FUNCTION
local function fly()
    if not Settings.Misc.Fly.Enable or not player.Character then return end
    
    local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
    local rootPart = player.Character:FindFirstChild("HumanoidRootPart")
    if not humanoid or not rootPart then return end
    
    -- Set flying state
    humanoid:ChangeState(Enum.HumanoidStateType.Flying)
    
    -- Get movement direction
    local moveDirection = Vector3.new(0, 0, 0)
    
    if UserInputService:IsKeyDown(Enum.KeyCode.W) then
        moveDirection = moveDirection + camera.CFrame.LookVector
    end
    if UserInputService:IsKeyDown(Enum.KeyCode.S) then
        moveDirection = moveDirection - camera.CFrame.LookVector
    end
    if UserInputService:IsKeyDown(Enum.KeyCode.A) then
        moveDirection = moveDirection - camera.CFrame.RightVector
    end
    if UserInputService:IsKeyDown(Enum.KeyCode.D) then
        moveDirection = moveDirection + camera.CFrame.RightVector
    end
    if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
        moveDirection = moveDirection + Vector3.new(0, 1, 0)
    end
    if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
        moveDirection = moveDirection - Vector3.new(0, 1, 0)
    end
    
    -- Normalize and apply speed
    if moveDirection.Magnitude > 0 then
        moveDirection = moveDirection.Unit * Settings.Misc.Fly.Speed
    end
    
    -- Apply movement
    if Settings.Misc.Fly.Type == "Normal" then
        rootPart.Velocity = moveDirection
    else -- Momentum based
        rootPart.Velocity = rootPart.Velocity:Lerp(moveDirection, 0.1)
    end
end

-- SPEED FUNCTION
local function speedBoost()
    if not Settings.Misc.Speed.Enable or not player.Character then return end
    
    local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end
    
    if Settings.Misc.Speed.Type == "Legit" then
        -- Legit speed (sliding)
        humanoid.WalkSpeed = 16 + Settings.Misc.Speed.LegitSlideAmount
    else
        -- Unlegit speed (constant)
        humanoid.WalkSpeed = Settings.Misc.Speed.Amount
    end
end

-- ANTI AIM FUNCTION
local function antiAim()
    if not player.Character then return end
    
    local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
    local rootPart = player.Character:FindFirstChild("HumanoidRootPart")
    if not humanoid or not rootPart then return end
    
    -- Implement various anti-aim techniques here
    -- This is just a placeholder for the structure
end

-- PLAYER TELEPORT FUNCTION
local function teleportToPlayer(target)
    if not target or not target.Character then return end
    
    local targetRoot = target.Character:FindFirstChild("HumanoidRootPart")
    local playerRoot = player.Character:FindFirstChild("HumanoidRootPart")
    if not targetRoot or not playerRoot then return end
    
    playerRoot.CFrame = targetRoot.CFrame + Vector3.new(0, 3, 0)
end

-- PLAYER FLING FUNCTION
local function flingPlayer(target)
    if not target or not target.Character then return end
    
    local targetRoot = target.Character:FindFirstChild("HumanoidRootPart")
    local playerRoot = player.Character:FindFirstChild("HumanoidRootPart")
    if not targetRoot or not playerRoot then return end
    
    -- Apply velocity to fling the target
    targetRoot.Velocity = Vector3.new(
        math.random(-1000, 1000),
        math.random(500, 1000),
        math.random(-1000, 1000)
    )
end

-- CONFIG SYSTEM
local function saveConfig(name)
    if not name or name == "" then return end
    
    local config = {
        Settings = Settings,
        Theme = Theme
    }
    
    local json = HttpService:JSONEncode(config)
    writefile("EnhancedPupyyware_"..name..".json", json)
    
    -- Update config list
    if not table.find(Settings.Config.List, name) then
        table.insert(Settings.Config.List, name)
    end
    
    sendNotification("Config Saved", "Successfully saved config: "..name, 3)
end

local function loadConfig(name)
    if not name or name == "" then return end
    
    local success, config = pcall(function()
        return HttpService:JSONDecode(readfile("EnhancedPupyyware_"..name..".json"))
    end)
    
    if success and config then
        Settings = config.Settings
        Theme = config.Theme
        
        -- Update UI with new settings
        updateUI()
        
        sendNotification("Config Loaded", "Successfully loaded config: "..name, 3)
    else
        sendNotification("Config Error", "Failed to load config: "..name, 3)
    end
end

local function deleteConfig(name)
    if not name or name == "" then return end
    
    local success = pcall(function()
        delfile("EnhancedPupyyware_"..name..".json")
    end)
    
    if success then
        -- Remove from config list
        for i, configName in pairs(Settings.Config.List) do
            if configName == name then
                table.remove(Settings.Config.List, i)
                break
            end
        end
        
        sendNotification("Config Deleted", "Successfully deleted config: "..name, 3)
    else
        sendNotification("Config Error", "Failed to delete config: "..name, 3)
    end
end

-- UPDATE UI FUNCTION
local function updateUI()
    -- Update theme colors
    glowEffect.ImageColor3 = Theme.GlowColor
    glowEffect.ImageTransparency = 1 - Theme.GlowIntensity
    glowEffect.Visible = Settings.GlowEnabled
    
    outline.BackgroundColor3 = Theme.AccentColor
    outline2.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    indent.BackgroundColor3 = Theme.BackgroundColor
    indent.BorderColor3 = Theme.BorderColor
    main.BackgroundColor3 = Theme.BackgroundColor
    main.BorderColor3 = Theme.BorderColor
    outline3.BackgroundColor3 = Theme.SurfaceColor
    outline3.BorderColor3 = Color3.fromRGB(12, 12, 12)
    
    titleText.Font = Theme.Font
    titleText.TextColor3 = Theme.PrimaryText
    
    closeButton.BackgroundColor3 = Theme.CloseButtonColor
    closeButtonText.TextColor3 = Theme.PrimaryText
    
    -- Update watermark
    watermark.BackgroundColor3 = Theme.WatermarkColor
    watermarkText.TextColor3 = Theme.PrimaryText
    watermark.Visible = Settings.ShowWatermark
    
    -- Update all other UI elements based on current settings
    -- This would need to be expanded to update all UI elements when settings change
end

-- CREATE COMBAT TAB
local combatTab = tabPages[1].page
local combatSubTabs = createSubTabs(combatTab, {"Aimbot", "Other", "Fun"})

-- Aimbot Subtab
local aimbotSection1 = createSection(combatSubTabs[1].page, "General", UDim2.new(0, 5, 0, 5), UDim2.new(1, -10, 0, 150))
local aimbotSection2 = createSection(combatSubTabs[1].page, "Settings", UDim2.new(0, 5, 0, 160), UDim2.new(1, -10, 0, 180))
local aimbotSection3 = createSection(combatSubTabs[1].page, "Aimbot FOV", UDim2.new(0, 5, 0, 345), UDim2.new(1, -10, 0, 150))

-- General Section
local enableAimbotToggle, getAimbotEnabled, setAimbotEnabled = createToggleWithHotkey(aimbotSection1, "Enable Aimbot", Settings.Combat.Enable, function(value)
    Settings.Combat.Enable = value
end)

local useChecksToggle, getUseChecks = createToggle(aimbotSection1, "Use Checks", false, function(value)
    Settings.Combat.Checks = value and {
        TeamCheck = true,
        WallCheck = true
    } or {}
end)

local checksDropdown, getChecks = createMultiDropdown(aimbotSection1, "Checks", {"Team Check", "Wall Check"}, function(selected)
    Settings.Combat.Checks = {
        TeamCheck = table.find(selected, "Team Check") ~= nil,
        WallCheck = table.find(selected, "Wall Check") ~= nil
    }
end)

local useSmoothnessToggle, getUseSmoothness = createToggle(aimbotSection1, "Use Smoothness", Settings.Combat.UseSmoothness, function(value)
    Settings.Combat.UseSmoothness = value
end)

local usePredictionToggle, getUsePrediction = createToggle(aimbotSection1, "Use Prediction", Settings.Combat.UsePrediction, function(value)
    Settings.Combat.UsePrediction = value
end)

local useCustomOffsetToggle, getUseCustomOffset = createToggle(aimbotSection1, "Use Custom Offset", Settings.Combat.UseCustomOffset, function(value)
    Settings.Combat.UseCustomOffset = value
end)

local hitPartDropdown, getHitPart = createDropdown(aimbotSection1, "Hit Part", {"Head", "Torso", "Left Arm", "Right Arm", "Left Leg", "Right Leg", "HumanoidRootPart"}, Settings.Combat.HitPart, function(value)
    Settings.Combat.HitPart = value
end)

local aimTypeDropdown, getAimType = createDropdown(aimbotSection1, "Aim Type", {"Mouse", "Camera"}, Settings.Combat.AimType, function(value)
    Settings.Combat.AimType = value
end)

-- Settings Section
local xSmoothnessSlider, getXSmoothness = createSlider(aimbotSection2, "X Smoothness", 1, 100, Settings.Combat.XSmoothness, function(value)
    Settings.Combat.XSmoothness = value
end)

local ySmoothnessSlider, getYSmoothness = createSlider(aimbotSection2, "Y Smoothness", 1, 100, Settings.Combat.YSmoothness, function(value)
    Settings.Combat.YSmoothness = value
end)

local xPredictionSlider, getXPrediction = createSlider(aimbotSection2, "X Prediction", 1, 100, Settings.Combat.XPrediction, function(value)
    Settings.Combat.XPrediction = value
end)

local yPredictionSlider, getYPrediction = createSlider(aimbotSection2, "Y Prediction", 1, 100, Settings.Combat.YPrediction, function(value)
    Settings.Combat.YPrediction = value
end)

local xOffsetSlider, getXOffset = createSlider(aimbotSection2, "X Offset", -50, 50, Settings.Combat.XOffset, function(value)
    Settings.Combat.XOffset = value
end)

local yOffsetSlider, getYOffset = createSlider(aimbotSection2, "Y Offset", -50, 50, Settings.Combat.YOffset, function(value)
    Settings.Combat.YOffset = value
end)

-- Aimbot FOV Section
local useFOVToggle, getUseFOV = createToggle(aimbotSection3, "Use FOV", Settings.Combat.UseFOV, function(value)
    Settings.Combat.UseFOV = value
    if FOVCircle then FOVCircle.Visible = value and Settings.Combat.DrawFOV end
end)

local drawFOVToggle, getDrawFOV = createToggle(aimbotSection3, "Draw FOV", Settings.Combat.DrawFOV, function(value)
    Settings.Combat.DrawFOV = value
    if FOVCircle then FOVCircle.Visible = value and Settings.Combat.UseFOV end
end)

local fovOutlineColor, getFOVOutlineColor = createColorPicker(aimbotSection3, "FOV Outline Color", Settings.Combat.FOVOutlineColor, function(value)
    Settings.Combat.FOVOutlineColor = value
    if FOVCircle then
        FOVCircle:FindFirstChild("ImageLabel").ImageColor3 = value
    end
end)

local fillFOVToggle, getFillFOV = createToggle(aimbotSection3, "Fill FOV", Settings.Combat.FillFOV, function(value)
    Settings.Combat.FillFOV = value
    createFOVCircle()
end)

local fovFillColor, getFOVFillColor = createColorPicker(aimbotSection3, "FOV Fill Color", Settings.Combat.FOVFillColor, function(value)
    Settings.Combat.FOVFillColor = value
    if FOVCircle and FOVCircle:FindFirstChildOfClass("ImageLabel") then
        FOVCircle:FindFirstChildOfClass("ImageLabel").ImageColor3 = value
    end
end)

local fovSizeSlider, getFOVSize = createSlider(aimbotSection3, "FOV Size", 10, 500, Settings.Combat.FOVSize, function(value)
    Settings.Combat.FOVSize = value
    createFOVCircle()
end)

local fovFillTransSlider, getFOVFillTrans = createSlider(aimbotSection3, "FOV Fill Transparency", 0, 100, Settings.Combat.FOVFillTransparency, function(value)
    Settings.Combat.FOVFillTransparency = value
    if FOVCircle and FOVCircle:FindFirstChildOfClass("ImageLabel") then
        FOVCircle:FindFirstChildOfClass("ImageLabel").ImageTransparency = value / 100
    end
end)

local fovOutlineTransSlider, getFOVOutlineTrans = createSlider(aimbotSection3, "FOV Outline Transparency", 0, 100, Settings.Combat.FOVOutlineTransparency, function(value)
    Settings.Combat.FOVOutlineTransparency = value
    if FOVCircle then
        FOVCircle:FindFirstChild("ImageLabel").ImageTransparency = value / 100
    end
end)

-- Other Subtab
local otherSection1 = createSection(combatSubTabs[2].page, "Silent Aim", UDim2.new(0, 5, 0, 5), UDim2.new(1, -10, 0, 150))
local otherSection2 = createSection(combatSubTabs[2].page, "Orbit Lock", UDim2.new(0, 5, 0, 160), UDim2.new(1, -10, 0, 180))
local otherSection3 = createSection(combatSubTabs[2].page, "Silent Aim FOV", UDim2.new(0, 5, 0, 345), UDim2.new(1, -10, 0, 150))

-- Silent Aim Section
local silentAimToggle, getSilentAimEnabled, setSilentAimEnabled = createToggleWithHotkey(otherSection1, "Enable Silent Aim", Settings.Combat.SilentAim.Enable, function(value)
    Settings.Combat.SilentAim.Enable = value
end)

local silentHitPartDropdown, getSilentHitParts = createMultiDropdown(otherSection1, "Hit Parts", {"Head", "Torso", "Left Arm", "Right Arm", "Left Leg", "Right Leg", "HumanoidRootPart"}, function(selected)
    Settings.Combat.SilentAim.HitParts = selected
end)

local hitChanceToggle, getHitChanceEnabled = createToggle(otherSection1, "Hit Chance", false, function(value)
    Settings.Combat.SilentAim.HitChance = value and 100 or 0
end)

local hitChanceSlider, getHitChance = createSlider(otherSection1, "Hit Chance %", 1, 100, Settings.Combat.SilentAim.HitChance, function(value)
    Settings.Combat.SilentAim.HitChance = value
end)

local wallCheckToggle, getWallCheck = createToggle(otherSection1, "Wall Check", Settings.Combat.SilentAim.WallCheck, function(value)
    Settings.Combat.SilentAim.WallCheck = value
end)

local teamCheckToggle, getTeamCheck = createToggle(otherSection1, "Team Check", Settings.Combat.SilentAim.TeamCheck, function(value)
    Settings.Combat.SilentAim.TeamCheck = value
end)

-- Orbit Lock Section
local orbitLockToggle, getOrbitLockEnabled, setOrbitLockEnabled = createToggleWithHotkey(otherSection2, "Enable Orbit Lock", Settings.Combat.OrbitLock.Enable, function(value)
    Settings.Combat.OrbitLock.Enable = value
    if not value and player.Character then
        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.AutoRotate = true
        end
        camera.CameraSubject = player.Character:FindFirstChildOfClass("Humanoid")
    end
end)

local orbitHitPartDropdown, getOrbitHitPart = createDropdown(otherSection2, "Hit Part", {"Head", "Torso", "Left Arm", "Right Arm", "Left Leg", "Right Leg", "HumanoidRootPart"}, Settings.Combat.OrbitLock.HitPart, function(value)
    Settings.Combat.OrbitLock.HitPart = value
end)

local lookAtToggle, getLookAtTarget = createToggle(otherSection2, "Look At Target", Settings.Combat.OrbitLock.LookAtTarget, function(value)
    Settings.Combat.OrbitLock.LookAtTarget = value
end)

local spectateToggle, getSpectate = createToggle(otherSection2, "Spectate", Settings.Combat.OrbitLock.Spectate, function(value)
    Settings.Combat.OrbitLock.Spectate = value
end)

local orbitText = create("TextLabel", {
    BackgroundTransparency = 1,
    Size = UDim2.new(1, 0, 0, 20),
    Position = UDim2.new(0, 0, 0, 100),
    Font = Theme.Font,
    Text = "Orbit Placement:",
    TextColor3 = Theme.PrimaryText,
    TextSize = 11,
    TextStrokeTransparency = 0,
    TextXAlignment = Enum.TextXAlignment.Left,
    Parent = otherSection2
})

local xOrbitOffsetSlider, getXOrbitOffset = createSlider(otherSection2, "X Orbit Offset", -50, 50, Settings.Combat.OrbitLock.XOffset, function(value)
    Settings.Combat.OrbitLock.XOffset = value
end)

local yOrbitOffsetSlider, getYOrbitOffset = createSlider(otherSection2, "Y Orbit Offset", -50, 50, Settings.Combat.OrbitLock.YOffset, function(value)
    Settings.Combat.OrbitLock.YOffset = value
end)

local resetOffsetToggle, getResetOffset = createToggle(otherSection2, "Reset Offset", Settings.Combat.OrbitLock.ResetOffset, function(value)
    Settings.Combat.OrbitLock.ResetOffset = value
    if value then
        Settings.Combat.OrbitLock.XOffset = 0
        Settings.Combat.OrbitLock.YOffset = 0
        xOrbitOffsetSlider:FindFirstChildOfClass("Frame").Slide.Size = UDim2.new(0.5, 0, 1, 0)
        yOrbitOffsetSlider:FindFirstChildOfClass("Frame").Slide.Size = UDim2.new(0.5, 0, 1, 0)
    end
end)

-- Silent Aim FOV Section
local silentUseFOVToggle, getSilentUseFOV = createToggle(otherSection3, "Use FOV", Settings.Combat.SilentAim.UseFOV, function(value)
    Settings.Combat.SilentAim.UseFOV = value
    if SilentFOVCircle then SilentFOVCircle.Visible = value and Settings.Combat.SilentAim.DrawFOV end
end)

local silentDrawFOVToggle, getSilentDrawFOV = createToggle(otherSection3, "Draw FOV", Settings.Combat.SilentAim.DrawFOV, function(value)
    Settings.Combat.SilentAim.DrawFOV = value
    if SilentFOVCircle then SilentFOVCircle.Visible = value and Settings.Combat.SilentAim.UseFOV end
end)

local silentFovOutlineColor, getSilentFOVOutlineColor = createColorPicker(otherSection3, "FOV Outline Color", Settings.Combat.SilentAim.FOVOutlineColor, function(value)
    Settings.Combat.SilentAim.FOVOutlineColor = value
    if SilentFOVCircle then
        SilentFOVCircle:FindFirstChild("ImageLabel").ImageColor3 = value
    end
end)

local silentFillFOVToggle, getSilentFillFOV = createToggle(otherSection3, "Fill FOV", Settings.Combat.SilentAim.FillFOV, function(value)
    Settings.Combat.SilentAim.FillFOV = value
    createSilentFOVCircle()
end)

local silentFovFillColor, getSilentFOVFillColor = createColorPicker(otherSection3, "FOV Fill Color", Settings.Combat.SilentAim.FOVFillColor, function(value)
    Settings.Combat.SilentAim.FOVFillColor = value
    if SilentFOVCircle and SilentFOVCircle:FindFirstChildOfClass("ImageLabel") then
        SilentFOVCircle:FindFirstChildOfClass("ImageLabel").ImageColor3 = value
    end
end)

local silentFovSizeSlider, getSilentFOVSize = createSlider(otherSection3, "FOV Size", 10, 500, Settings.Combat.SilentAim.FOVSize, function(value)
    Settings.Combat.SilentAim.FOVSize = value
    createSilentFOVCircle()
end)

local silentFovFillTransSlider, getSilentFOVFillTrans = createSlider(otherSection3, "FOV Fill Transparency", 0, 100, Settings.Combat.SilentAim.FOVFillTransparency, function(value)
    Settings.Combat.SilentAim.FOVFillTransparency = value
    if SilentFOVCircle and SilentFOVCircle:FindFirstChildOfClass("ImageLabel") then
        SilentFOVCircle:FindFirstChildOfClass("ImageLabel").ImageTransparency = value / 100
    end
end)

local silentFovOutlineTransSlider, getSilentFOVOutlineTrans = createSlider(otherSection3, "FOV Outline Transparency", 0, 100, Settings.Combat.SilentAim.FOVOutlineTransparency, function(value)
    Settings.Combat.SilentAim.FOVOutlineTransparency = value
    if SilentFOVCircle then
        SilentFOVCircle:FindFirstChild("ImageLabel").ImageTransparency = value / 100
    end
end)

-- Fun Subtab
local funSection1 = createSection(combatSubTabs[3].page, "Fun Features", UDim2.new(0, 5, 0, 5), UDim2.new(1, -10, 0, 250))

-- Fun Features Section
local hitNotifToggle, getHitNotif = createToggle(funSection1, "Hit Notification", Settings.Combat.HitNotification, function(value)
    Settings.Combat.HitNotification = value
end)

local hitSoundDropdown, getHitSound = createDropdown(funSection1, "Hit Sound", {"None", "Neverlose", "Rust Headshot", "Rust Hitsound", "MW2019", "Coin1", "Coin2"}, Settings.Combat.HitSound, function(value)
    Settings.Combat.HitSound = value
end)

local targetTracerToggle, getTargetTracer = createToggle(funSection1, "Target Tracer", Settings.Combat.TargetTracer, function(value)
    Settings.Combat.TargetTracer = value
    createTargetTracer()
end)

local targetTracerColor, getTargetTracerColor = createColorPicker(funSection1, "Tracer Color", Settings.Combat.TargetTracerColor, function(value)
    Settings.Combat.TargetTracerColor = value
    if ESPObjects[player] and ESPObjects[player].tracers then
        for _, tracer in pairs(ESPObjects[player].tracers) do
            tracer.BackgroundColor3 = value
        end
    end
end)

local targetHeadDotToggle, getTargetHeadDot = createToggle(funSection1, "Target Head Dot", Settings.Combat.TargetHeadDot, function(value)
    Settings.Combat.TargetHeadDot = value
    createTargetHeadDot()
end)

local targetHeadDotColor, getTargetHeadDotColor = createColorPicker(funSection1, "Head Dot Color", Settings.Combat.TargetHeadDotColor, function(value)
    Settings.Combat.TargetHeadDotColor = value
    if ESPObjects[player] and ESPObjects[player].headDot then
        ESPObjects[player].headDot.BackgroundColor3 = value
    end
end)

local targetInfoBoxToggle, getTargetInfoBox = createToggle(funSection1, "Target Info Box", Settings.Combat.TargetInfoBox, function(value)
    Settings.Combat.TargetInfoBox = value
    createTargetInfoBox()
end)

local targetInfoBoxColor, getTargetInfoBoxColor = createColorPicker(funSection1, "Info Box Color", Settings.Combat.TargetInfoBoxColor, function(value)
    Settings.Combat.TargetInfoBoxColor = value
    if ESPObjects[player] and ESPObjects[player].infoBox then
        ESPObjects[player].infoBox.BorderColor3 = value
        for _, child in pairs(ESPObjects[player].infoBox:GetChildren()) do
            if child:IsA("TextLabel") then
                child.TextColor3 = value
            end
        end
    end
end)

local targetGlowChamsToggle, getTargetGlowChams = createToggle(funSection1, "Target Glow Chams", Settings.Combat.TargetGlowChams, function(value)
    Settings.Combat.TargetGlowChams = value
    createTargetGlowChams()
end)

local targetGlowChamsColor, getTargetGlowChamsColor = createColorPicker(funSection1, "Glow Chams Color", Settings.Combat.TargetGlowChamsColor, function(value)
    Settings.Combat.TargetGlowChamsColor = value
    if ESPObjects[player] and ESPObjects[player].glowChams then
        for _, cham in pairs(ESPObjects[player].glowChams) do
            cham.Color3 = value
        end
    end
end)

-- CREATE VISUALS TAB
local visualsTab = tabPages[2].page
local visualsSubTabs = createSubTabs(visualsTab, {"ESP", "World", "Effects"})

-- ESP Subtab
local espSection1 = createSection(visualsSubTabs[1].page, "ESP", UDim2.new(0, 5, 0, 5), UDim2.new(1, -10, 0, 300))
local espSection2 = createSection(visualsSubTabs[1].page, "Self ESP", UDim2.new(0, 5, 0, 310), UDim2.new(1, -10, 0, 300))

-- ESP Section
local espEnableToggle, getESPEnabled = createToggle(espSection1, "Enable ESP", Settings.Visuals.ESP.Enable, function(value)
    Settings.Visuals.ESP.Enable = value
    for player, esp in pairs(ESPObjects) do
        if player ~= player then
            if esp.box then esp.box.Visible = value and Settings.Visuals.ESP.BoxESP end
            if esp.name then esp.name.Visible = value and Settings.Visuals.ESP.NameESP end
            if esp.healthBar then esp.healthBar.Visible = value and Settings.Visuals.ESP.HealthBarESP end
            if esp.healthText then esp.healthText.Visible = value and Settings.Visuals.ESP.HealthNumber end
            if esp.tool then esp.tool.Visible = value and Settings.Visuals.ESP.ToolESP end
            if esp.distance then esp.distance.Visible = value and Settings.Visuals.ESP.DistanceESP end
            if esp.chams then
                for _, cham in pairs(esp.chams) do
                    cham.Visible = value and Settings.Visuals.ESP.ChamsESP
                end
            end
            if esp.skeleton then
                for _, line in pairs(esp.skeleton) do
                    line.Visible = value and Settings.Visuals.ESP.SkeletonESP
                end
            end
        end
    end
end)

local boxESPToggle, getBoxESP = createToggle(espSection1, "Box ESP", Settings.Visuals.ESP.BoxESP, function(value)
    Settings.Visuals.ESP.BoxESP = value
    for player, esp in pairs(ESPObjects) do
        if player ~= player and esp.box then
            esp.box.Visible = value and Settings.Visuals.ESP.Enable
        end
    end
end)

local boxESPColor, getBoxESPColor = createColorPicker(espSection1, "Box Color", Settings.Visuals.ESP.BoxESPColor, function(value)
    Settings.Visuals.ESP.BoxESPColor = value
    for player, esp in pairs(ESPObjects) do
        if player ~= player and esp.box then
            esp.box:FindFirstChild("Frame").BackgroundColor3 = value
        end
    end
end)

local boxTypeDropdown, getBoxType = createDropdown(espSection1, "Box Type", {"Normal", "Corner", "3D"}, Settings.Visuals.ESP.BoxType, function(value)
    Settings.Visuals.ESP.BoxType = value
    -- Would need to update all ESP boxes to new type
end)

local boxGlowToggle, getBoxGlow = createToggle(espSection1, "Box Glow", Settings.Visuals.ESP.BoxGlow, function(value)
    Settings.Visuals.ESP.BoxGlow = value
    for player, esp in pairs(ESPObjects) do
        if player ~= player and esp.box then
            local outline = esp.box:FindFirstChild("Frame")
            if value then
                create("UIStroke", {
                    Color = Settings.Visuals.ESP.BoxGlowColor,
                    Thickness = 2,
                    Transparency = 1 - (Settings.Visuals.ESP.GlowIntensity / 100),
                    Parent = outline
                })
            else
                local stroke = outline:FindFirstChildOfClass("UIStroke")
                if stroke then stroke:Destroy() end
            end
        end
    end
end)

local boxGlowColor, getBoxGlowColor = createColorPicker(espSection1, "Box Glow Color", Settings.Visuals.ESP.BoxGlowColor, function(value)
    Settings.Visuals.ESP.BoxGlowColor = value
    for player, esp in pairs(ESPObjects) do
        if player ~= player and esp.box then
            local outline = esp.box:FindFirstChild("Frame")
            local stroke = outline:FindFirstChildOfClass("UIStroke")
            if stroke then
                stroke.Color = value
            end
        end
    end
end)

local nameESPToggle, getNameESP = createToggle(espSection1, "Name ESP", Settings.Visuals.ESP.NameESP, function(value)
    Settings.Visuals.ESP.NameESP = value
    for player, esp in pairs(ESPObjects) do
        if player ~= player and esp.name then
            esp.name.Visible = value and Settings.Visuals.ESP.Enable
        end
    end
end)

local nameESPColor, getNameESPColor = createColorPicker(espSection1, "Name Color", Settings.Visuals.ESP.NameESPColor, function(value)
    Settings.Visuals.ESP.NameESPColor = value
    for player, esp in pairs(ESPObjects) do
        if player ~= player and esp.name then
            esp.name.TextColor3 = value
        end
    end
end)

local nameOutlineToggle, getNameOutline = createToggle(espSection1, "Text Outline", Settings.Visuals.ESP.NameOutline, function(value)
    Settings.Visuals.ESP.NameOutline = value
    for player, esp in pairs(ESPObjects) do
        if player ~= player and esp.name then
            if value then
                create("UIStroke", {
                    Color = Color3.new(0, 0, 0),
                    Thickness = 2,
                    Parent = esp.name
                })
            else
                local stroke = esp.name:FindFirstChildOfClass("UIStroke")
                if stroke then stroke:Destroy() end
            end
        end
    end
end)

local nameGlowToggle, getNameGlow = createToggle(espSection1, "Name Glow", Settings.Visuals.ESP.NameGlow, function(value)
    Settings.Visuals.ESP.NameGlow = value
    for player, esp in pairs(ESPObjects) do
        if player ~= player and esp.name then
            if value then
                create("UIGradient", {
                    Color = ColorSequence.new{
                        ColorSequenceKeypoint.new(0, Settings.Visuals.ESP.NameGlowColor),
                        ColorSequenceKeypoint.new(1, Settings.Visuals.ESP.NameESPColor)
                    },
                    Rotation = 90,
                    Parent = esp.name
                })
            else
                local gradient = esp.name:FindFirstChildOfClass("UIGradient")
                if gradient then gradient:Destroy() end
            end
        end
    end
end)

local nameGlowColor, getNameGlowColor = createColorPicker(espSection1, "Name Glow Color", Settings.Visuals.ESP.NameGlowColor, function(value)
    Settings.Visuals.ESP.NameGlowColor = value
    for player, esp in pairs(ESPObjects) do
        if player ~= player and esp.name then
            local gradient = esp.name:FindFirstChildOfClass("UIGradient")
            if gradient then
                gradient.Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, value),
                    ColorSequenceKeypoint.new(1, Settings.Visuals.ESP.NameESPColor)
                }
            end
        end
    end
end)

local healthBarToggle, getHealthBar = createToggle(espSection1, "Health Bar ESP", Settings.Visuals.ESP.HealthBarESP, function(value)
    Settings.Visuals.ESP.HealthBarESP = value
    for player, esp in pairs(ESPObjects) do
        if player ~= player and esp.healthBar then
            esp.healthBar.Visible = value and Settings.Visuals.ESP.Enable
        end
    end
end)

local healthBarBGColor, getHealthBarBGColor = createColorPicker(espSection1, "Health Bar BG", Settings.Visuals.ESP.HealthBarBGColor, function(value)
    Settings.Visuals.ESP.HealthBarBGColor = value
    for player, esp in pairs(ESPObjects) do
        if player ~= player and esp.healthBar then
            local bg = esp.healthBar:FindFirstChild("Frame")
            if bg then
                bg.BackgroundColor3 = value
            end
        end
    end
end)

local healthBarColor, getHealthBarColor = createColorPicker(espSection1, "Health Bar Color", Settings.Visuals.ESP.HealthBarColor, function(value)
    Settings.Visuals.ESP.HealthBarColor = value
    for player, esp in pairs(ESPObjects) do
        if player ~= player and esp.healthBar then
            local fill = esp.healthBar:FindFirstChild("Frame"):FindFirstChild("Frame")
            if fill then
                fill.BackgroundColor3 = value
            end
        end
    end
end)

local healthBarOutlineToggle, getHealthBarOutline = createToggle(espSection1, "Text Outline", Settings.Visuals.ESP.HealthBarOutline, function(value)
    Settings.Visuals.ESP.HealthBarOutline = value
    for player, esp in pairs(ESPObjects) do
        if player ~= player and esp.healthText then
            if value then
                create("UIStroke", {
                    Color = Color3.new(0, 0, 0),
                    Thickness = 2,
                    Parent = esp.healthText
                })
            else
                local stroke = esp.healthText:FindFirstChildOfClass("UIStroke")
                if stroke then stroke:Destroy() end
            end
        end
    end
end)

local healthBarGlowToggle, getHealthBarGlow = createToggle(espSection1, "Health Bar Glow", Settings.Visuals.ESP.HealthBarGlow, function(value)
    Settings.Visuals.ESP.HealthBarGlow = value
    for player, esp in pairs(ESPObjects) do
        if player ~= player and esp.healthBar then
            local fill = esp.healthBar:FindFirstChild("Frame"):FindFirstChild("Frame")
            if fill then
                if value then
                    create("UIStroke", {
                        Color = Settings.Visuals.ESP.HealthBarGlowColor,
                        Thickness = 1,
                        Transparency = 1 - (Settings.Visuals.ESP.GlowIntensity / 100),
                        Parent = fill
                    })
                else
                    local stroke = fill:FindFirstChildOfClass("UIStroke")
                    if stroke then stroke:Destroy() end
                end
            end
        end
    end
end)

local healthBarGlowColor, getHealthBarGlowColor = createColorPicker(espSection1, "Health Glow Color", Settings.Visuals.ESP.HealthBarGlowColor, function(value)
    Settings.Visuals.ESP.HealthBarGlowColor = value
    for player, esp in pairs(ESPObjects) do
        if player ~= player and esp.healthBar then
            local fill = esp.healthBar:FindFirstChild("Frame"):FindFirstChild("Frame")
            if fill then
                local stroke = fill:FindFirstChildOfClass("UIStroke")
                if stroke then
                    stroke.Color = value
                end
            end
        end
    end
end)

local toolESPToggle, getToolESP = createToggle(espSection1, "Tool ESP", Settings.Visuals.ESP.ToolESP, function(value)
    Settings.Visuals.ESP.ToolESP = value
    for player, esp in pairs(ESPObjects) do
        if player ~= player and esp.tool then
            esp.tool.Visible = value and Settings.Visuals.ESP.Enable
        end
    end
end)

local toolESPColor, getToolESPColor = createColorPicker(espSection1, "Tool Color", Settings.Visuals.ESP.ToolESPColor, function(value)
    Settings.Visuals.ESP.ToolESPColor = value
    for player, esp in pairs(ESPObjects) do
        if player ~= player and esp.tool then
            esp.tool.TextColor3 = value
        end
    end
end)

local toolOutlineToggle, getToolOutline = createToggle(espSection1, "Text Outline", Settings.Visuals.ESP.ToolOutline, function(value)
    Settings.Visuals.ESP.ToolOutline = value
    for player, esp in pairs(ESPObjects) do
        if player ~= player and esp.tool then
            if value then
                create("UIStroke", {
                    Color = Color3.new(0, 0, 0),
                    Thickness = 2,
                    Parent = esp.tool
                })
            else
                local stroke = esp.tool:FindFirstChildOfClass("UIStroke")
                if stroke then stroke:Destroy() end
            end
        end
    end
end)

local toolGlowToggle, getToolGlow = createToggle(espSection1, "Tool Glow", Settings.Visuals.ESP.ToolGlow, function(value)
    Settings.Visuals.ESP.ToolGlow = value
    for player, esp in pairs(ESPObjects) do
        if player ~= player and esp.tool then
            if value then
                create("UIGradient", {
                    Color = ColorSequence.new{
                        ColorSequenceKeypoint.new(0, Settings.Visuals.ESP.ToolGlowColor),
                        ColorSequenceKeypoint.new(1, Settings.Visuals.ESP.ToolESPColor)
                    },
                    Rotation = 90,
                    Parent = esp.tool
                })
            else
                local gradient = esp.tool:FindFirstChildOfClass("UIGradient")
                if gradient then gradient:Destroy() end
            end
        end
    end
end)

local toolGlowColor, getToolGlowColor = createColorPicker(espSection1, "Tool Glow Color", Settings.Visuals.ESP.ToolGlowColor, function(value)
    Settings.Visuals.ESP.ToolGlowColor = value
    for player, esp in pairs(ESPObjects) do
        if player ~= player and esp.tool then
            local gradient = esp.tool:FindFirstChildOfClass("UIGradient")
            if gradient then
                gradient.Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, value),
                    ColorSequenceKeypoint.new(1, Settings.Visuals.ESP.ToolESPColor)
                }
            end
        end
    end
end)

local distanceESPToggle, getDistanceESP = createToggle(espSection1, "Distance ESP", Settings.Visuals.ESP.DistanceESP, function(value)
    Settings.Visuals.ESP.DistanceESP = value
    for player, esp in pairs(ESPObjects) do
        if player ~= player and esp.distance then
            esp.distance.Visible = value and Settings.Visuals.ESP.Enable
        end
    end
end)

local distanceESPColor, getDistanceESPColor = createColorPicker(espSection1, "Distance Color", Settings.Visuals.ESP.DistanceESPColor, function(value)
    Settings.Visuals.ESP.DistanceESPColor = value
    for player, esp in pairs(ESPObjects) do
        if player ~= player and esp.distance then
            esp.distance.TextColor3 = value
        end
    end
end)

local distanceOutlineToggle, getDistanceOutline = createToggle(espSection1, "Text Outline", Settings.Visuals.ESP.DistanceOutline, function(value)
    Settings.Visuals.ESP.DistanceOutline = value
    for player, esp in pairs(ESPObjects) do
        if player ~= player and esp.distance then
            if value then
                create("UIStroke", {
                    Color = Color3.new(0, 0, 0),
                    Thickness = 2,
                    Parent = esp.distance
                })
            else
                local stroke = esp.distance:FindFirstChildOfClass("UIStroke")
                if stroke then stroke:Destroy() end
            end
        end
    end
end)

local distanceGlowToggle, getDistanceGlow = createToggle(espSection1, "Distance Glow", Settings.Visuals.ESP.DistanceGlow, function(value)
    Settings.Visuals.ESP.DistanceGlow = value
    for player, esp in pairs(ESPObjects) do
        if player ~= player and esp.distance then
            if value then
                create("UIGradient", {
                    Color = ColorSequence.new{
                        ColorSequenceKeypoint.new(0, Settings.Visuals.ESP.DistanceGlowColor),
                        ColorSequenceKeypoint.new(1, Settings.Visuals.ESP.DistanceESPColor)
                    },
                    Rotation = 90,
                    Parent = esp.distance
                })
            else
                local gradient = esp.distance:FindFirstChildOfClass("UIGradient")
                if gradient then gradient:Destroy() end
            end
        end
    end
end)

local distanceGlowColor, getDistanceGlowColor = createColorPicker(espSection1, "Distance Glow Color", Settings.Visuals.ESP.DistanceGlowColor, function(value)
    Settings.Visuals.ESP.DistanceGlowColor = value
    for player, esp in pairs(ESPObjects) do
        if player ~= player and esp.distance then
            local gradient = esp.distance:FindFirstChildOfClass("UIGradient")
            if gradient then
                gradient.Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, value),
                    ColorSequenceKeypoint.new(1, Settings.Visuals.ESP.DistanceESPColor)
                }
            end
        end
    end
end)

local chamsESPToggle, getChamsESP = createToggle(espSection1, "Chams ESP", Settings.Visuals.ESP.ChamsESP, function(value)
    Settings.Visuals.ESP.ChamsESP = value
    for player, esp in pairs(ESPObjects) do
        if player ~= player and esp.chams then
            for _, cham in pairs(esp.chams) do
                cham.Visible = value and Settings.Visuals.ESP.Enable
            end
        end
    end
end)

local chamsESPColor, getChamsESPColor = createColorPicker(espSection1, "Chams Color", Settings.Visuals.ESP.ChamsESPColor, function(value)
    Settings.Visuals.ESP.ChamsESPColor = value
    for player, esp in pairs(ESPObjects) do
        if player ~= player and esp.chams then
            for _, cham in pairs(esp.chams) do
                cham.Color3 = value
            end
        end
    end
end)

local chamsGlowToggle, getChamsGlow = createToggle(espSection1, "Chams Glow", Settings.Visuals.ESP.ChamsGlow, function(value)
    Settings.Visuals.ESP.ChamsGlow = value
    for player, esp in pairs(ESPObjects) do
        if player ~= player and esp.chams then
            for _, cham in pairs(esp.chams) do
                if value then
                    create("UIGradient", {
                        Color = ColorSequence.new{
                            ColorSequenceKeypoint.new(0, Settings.Visuals.ESP.ChamsGlowColor),
                            ColorSequenceKeypoint.new(1, Settings.Visuals.ESP.ChamsESPColor)
                        },
                        Rotation = 90,
                        Parent = cham
                    })
                else
                    local gradient = cham:FindFirstChildOfClass("UIGradient")
                    if gradient then gradient:Destroy() end
                end
            end
        end
    end
end)

local chamsGlowColor, getChamsGlowColor = createColorPicker(espSection1, "Chams Glow Color", Settings.Visuals.ESP.ChamsGlowColor, function(value)
    Settings.Visuals.ESP.ChamsGlowColor = value
    for player, esp in pairs(ESPObjects) do
        if player ~= player and esp.chams then
            for _, cham in pairs(esp.chams) do
                local gradient = cham:FindFirstChildOfClass("UIGradient")
                if gradient then
                    gradient.Color = ColorSequence.new{
                        ColorSequenceKeypoint.new(0, value),
                        ColorSequenceKeypoint.new(1, Settings.Visuals.ESP.ChamsESPColor)
                    }
                end
            end
        end
    end
end)

local skeletonESPToggle, getSkeletonESP = createToggle(espSection1, "Skeleton ESP", Settings.Visuals.ESP.SkeletonESP, function(value)
    Settings.Visuals.ESP.SkeletonESP = value
    for player, esp in pairs(ESPObjects) do
        if player ~= player and esp.skeleton then
            for _, line in pairs(esp.skeleton) do
                line.Visible = value and Settings.Visuals.ESP.Enable
            end
        end
    end
end)

local skeletonESPColor, getSkeletonESPColor = createColorPicker(espSection1, "Skeleton Color", Settings.Visuals.ESP.SkeletonESPColor, function(value)
    Settings.Visuals.ESP.SkeletonESPColor = value
    for player, esp in pairs(ESPObjects) do
        if player ~= player and esp.skeleton then
            for _, line in pairs(esp.skeleton) do
                line.Color3 = value
            end
        end
    end
end)

local skeletonGlowToggle, getSkeletonGlow = createToggle(espSection1, "Skeleton Glow", Settings.Visuals.ESP.SkeletonGlow, function(value)
    Settings.Visuals.ESP.SkeletonGlow = value
    for player, esp in pairs(ESPObjects) do
        if player ~= player and esp.skeleton then
            for _, line in pairs(esp.skeleton) do
                if value then
                    create("UIGradient", {
                        Color = ColorSequence.new{
                            ColorSequenceKeypoint.new(0, Settings.Visuals.ESP.SkeletonGlowColor),
                            ColorSequenceKeypoint.new(1, Settings.Visuals.ESP.SkeletonESPColor)
                        },
                        Rotation = 90,
                        Parent = line
                    })
                else
                    local gradient = line:FindFirstChildOfClass("UIGradient")
                    if gradient then gradient:Destroy() end
                end
            end
        end
    end
end)

local skeletonGlowColor, getSkeletonGlowColor = createColorPicker(espSection1, "Skeleton Glow Color", Settings.Visuals.ESP.SkeletonGlowColor, function(value)
    Settings.Visuals.ESP.SkeletonGlowColor = value
    for player, esp in pairs(ESPObjects) do
        if player ~= player and esp.skeleton then
            for _, line in pairs(esp.skeleton) do
                local gradient = line:FindFirstChildOfClass("UIGradient")
                if gradient then
                    gradient.Color = ColorSequence.new{
                        ColorSequenceKeypoint.new(0, value),
                        ColorSequenceKeypoint.new(1, Settings.Visuals.ESP.SkeletonESPColor)
                    }
                end
            end
        end
    end
end)

-- ESP Other Section
local glowIntensitySlider, getGlowIntensity = createSlider(espSection1, "Glow Intensity", 0, 100, Settings.Visuals.ESP.GlowIntensity, function(value)
    Settings.Visuals.ESP.GlowIntensity = value
    for player, esp in pairs(ESPObjects) do
        if player ~= player then
            if esp.box and esp.box:FindFirstChild("Frame") then
                local stroke = esp.box:FindFirstChild("Frame"):FindFirstChildOfClass("UIStroke")
                if stroke then
                    stroke.Transparency = 1 - (value / 100)
                end
            end
            if esp.healthBar then
                local fill = esp.healthBar:FindFirstChild("Frame"):FindFirstChild("Frame")
                if fill then
                    local stroke = fill:FindFirstChildOfClass("UIStroke")
                    if stroke then
                        stroke.Transparency = 1 - (value / 100)
                    end
                end
            end
        end
    end
end)

local espDistanceSlider, getESPDistance = createSlider(espSection1, "ESP Distance", 10, 5000, Settings.Visuals.ESP.Distance, function(value)
    Settings.Visuals.ESP.Distance = value
end)

local healthNumberToggle, getHealthNumber = createToggle(espSection1, "Health Number", Settings.Visuals.ESP.HealthNumber, function(value)
    Settings.Visuals.ESP.HealthNumber = value
    for player, esp in pairs(ESPObjects) do
        if player ~= player then
            if value then
                if not esp.healthText and esp.healthBar then
                    esp.healthText = create("TextLabel", {
                        BackgroundTransparency = 1,
                        Size = UDim2.new(0, 30, 0, 20),
                        Position = UDim2.new(0, -15, 1 - (player.Character.Humanoid.Health / player.Character.Humanoid.MaxHealth), -10),
                        Font = Theme.Font,
                        Text = math.floor(player.Character.Humanoid.Health),
                        TextColor3 = Settings.Visuals.ESP.HealthNumberColor,
                        TextSize = 12,
                        TextStrokeTransparency = 0,
                        Parent = esp.healthBar
                    })
                elseif esp.healthText then
                    esp.healthText.Visible = value and Settings.Visuals.ESP.Enable
                end
            elseif esp.healthText then
                esp.healthText.Visible = false
            end
        end
    end
end)

local healthNumberColor, getHealthNumberColor = createColorPicker(espSection1, "Health Number Color", Settings.Visuals.ESP.HealthNumberColor, function(value)
    Settings.Visuals.ESP.HealthNumberColor = value
    for player, esp in pairs(ESPObjects) do
        if player ~= player and esp.healthText then
            esp.healthText.TextColor3 = value
        end
    end
end)

-- Self ESP Section (similar to ESP section but for self)
local selfESPEnableToggle, getSelfESPEnabled = createToggle(espSection2, "Enable Self ESP", Settings.Visuals.SelfESP.Enable, function(value)
    Settings.Visuals.SelfESP.Enable = value
    createSelfESP()
end)

local selfBoxESPToggle, getSelfBoxESP = createToggle(espSection2, "Box ESP", Settings.Visuals.SelfESP.BoxESP, function(value)
    Settings.Visuals.SelfESP.BoxESP = value
    if ESPObjects[player] and ESPObjects[player].box then
        ESPObjects[player].box.Visible = value and Settings.Visuals.SelfESP.Enable
    end
end)

local selfBoxESPColor, getSelfBoxESPColor = createColorPicker(espSection2, "Box Color", Settings.Visuals.SelfESP.BoxESPColor, function(value)
    Settings.Visuals.SelfESP.BoxESPColor = value
    if ESPObjects[player] and ESPObjects[player].box then
        ESPObjects[player].box:FindFirstChild("Frame").BackgroundColor3 = value
    end
end)

local selfBoxTypeDropdown, getSelfBoxType = createDropdown(espSection2, "Box Type", {"Normal", "Corner", "3D"}, Settings.Visuals.SelfESP.BoxType, function(value)
    Settings.Visuals.SelfESP.BoxType = value
    -- Would need to update self ESP box to new type
end)

local selfBoxGlowToggle, getSelfBoxGlow = createToggle(espSection2, "Box Glow", Settings.Visuals.SelfESP.BoxGlow, function(value)
    Settings.Visuals.SelfESP.BoxGlow = value
    if ESPObjects[player] and ESPObjects[player].box then
        local outline = ESPObjects[player].box:FindFirstChild("Frame")
        if value then
            create("UIStroke", {
                Color = Settings.Visuals.SelfESP.BoxGlowColor,
                Thickness = 2,
                Transparency = 1 - (Settings.Visuals.SelfESP.GlowIntensity / 100),
                Parent = outline
            })
        else
            local stroke = outline:FindFirstChildOfClass("UIStroke")
            if stroke then stroke:Destroy() end
        end
    end
end)

local selfBoxGlowColor, getSelfBoxGlowColor = createColorPicker(espSection2, "Box Glow Color", Settings.Visuals.SelfESP.BoxGlowColor, function(value)
    Settings.Visuals.SelfESP.BoxGlowColor = value
    if ESPObjects[player] and ESPObjects[player].box then
        local outline = ESPObjects[player].box:FindFirstChild("Frame")
        local stroke = outline:FindFirstChildOfClass("UIStroke")
        if stroke then
            stroke.Color = value
        end
    end
end)

local selfNameESPToggle, getSelfNameESP = createToggle(espSection2, "Name ESP", Settings.Visuals.SelfESP.NameESP, function(value)
    Settings.Visuals.SelfESP.NameESP = value
    if ESPObjects[player] and ESPObjects[player].name then
        ESPObjects[player].name.Visible = value and Settings.Visuals.SelfESP.Enable
    end
end)

local selfNameESPColor, getSelfNameESPColor = createColorPicker(espSection2, "Name Color", Settings.Visuals.SelfESP.NameESPColor, function(value)
    Settings.Visuals.SelfESP.NameESPColor = value
    if ESPObjects[player] and ESPObjects[player].name then
        ESPObjects[player].name.TextColor3 = value
    end
end)

local selfNameOutlineToggle, getSelfNameOutline = createToggle(espSection2, "Text Outline", Settings.Visuals.SelfESP.NameOutline, function(value)
    Settings.Visuals.SelfESP.NameOutline = value
    if ESPObjects[player] and ESPObjects[player].name then
        if value then
            create("UIStroke", {
                Color = Color3.new(0, 0, 0),
                Thickness = 2,
                Parent = ESPObjects[player].name
            })
        else
            local stroke = ESPObjects[player].name:FindFirstChildOfClass("UIStroke")
            if stroke then stroke:Destroy() end
        end
    end
end)

local selfNameGlowToggle, getSelfNameGlow = createToggle(espSection2, "Name Glow", Settings.Visuals.SelfESP.NameGlow, function(value)
    Settings.Visuals.SelfESP.NameGlow = value
    if ESPObjects[player] and ESPObjects[player].name then
        if value then
            create("UIGradient", {
                Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, Settings.Visuals.SelfESP.NameGlowColor),
                    ColorSequenceKeypoint.new(1, Settings.Visuals.SelfESP.NameESPColor)
                },
                Rotation = 90,
                Parent = ESPObjects[player].name
            })
        else
            local gradient = ESPObjects[player].name:FindFirstChildOfClass("UIGradient")
            if gradient then gradient:Destroy() end
        end
    end
end)

local selfNameGlowColor, getSelfNameGlowColor = createColorPicker(espSection2, "Name Glow Color", Settings.Visuals.SelfESP.NameGlowColor, function(value)
    Settings.Visuals.SelfESP.NameGlowColor = value
    if ESPObjects[player] and ESPObjects[player].name then
        local gradient = ESPObjects[player].name:FindFirstChildOfClass("UIGradient")
        if gradient then
            gradient.Color = ColorSequence.new{
                ColorSequenceKeypoint.new(0, value),
                ColorSequenceKeypoint.new(1, Settings.Visuals.SelfESP.NameESPColor)
            }
        end
    end
end)

local selfHealthBarToggle, getSelfHealthBar = createToggle(espSection2, "Health Bar ESP", Settings.Visuals.SelfESP.HealthBarESP, function(value)
    Settings.Visuals.SelfESP.HealthBarESP = value
    if ESPObjects[player] and ESPObjects[player].healthBar then
        ESPObjects[player].healthBar.Visible = value and Settings.Visuals.SelfESP.Enable
    end
end)

local selfHealthBarBGColor, getSelfHealthBarBGColor = createColorPicker(espSection2, "Health Bar BG", Settings.Visuals.SelfESP.HealthBarBGColor, function(value)
    Settings.Visuals.SelfESP.HealthBarBGColor = value
    if ESPObjects[player] and ESPObjects[player].healthBar then
        local bg = ESPObjects[player].healthBar:FindFirstChild("Frame")
        if bg then
            bg.BackgroundColor3 = value
        end
    end
end)

local selfHealthBarColor, getSelfHealthBarColor = createColorPicker(espSection2, "Health Bar Color", Settings.Visuals.SelfESP.HealthBarColor, function(value)
    Settings.Visuals.SelfESP.HealthBarColor = value
    if ESPObjects[player] and ESPObjects[player].healthBar then
        local fill = ESPObjects[player].healthBar:FindFirstChild("Frame"):FindFirstChild("Frame")
        if fill then
            fill.BackgroundColor3 = value
        end
    end
end)

local selfHealthBarOutlineToggle, getSelfHealthBarOutline = createToggle(espSection2, "Text Outline", Settings.Visuals.SelfESP.HealthBarOutline, function(value)
    Settings.Visuals.SelfESP.HealthBarOutline = value
    if ESPObjects[player] and ESPObjects[player].healthText then
        if value then
            create("UIStroke", {
                Color = Color3.new(0, 0, 0),
                Thickness = 2,
                Parent = ESPObjects[player].healthText
            })
        else
            local stroke = ESPObjects[player].healthText:FindFirstChildOfClass("UIStroke")
            if stroke then stroke:Destroy() end
        end
    end
end)

local selfHealthBarGlowToggle, getSelfHealthBarGlow = createToggle(espSection2, "Health Bar Glow", Settings.Visuals.SelfESP.HealthBarGlow, function(value)
    Settings.Visuals.SelfESP.HealthBarGlow = value
    if ESPObjects[player] and ESPObjects[player].healthBar then
        local fill = ESPObjects[player].healthBar:FindFirstChild("Frame"):FindFirstChild("Frame")
        if fill then
            if value then
                create("UIStroke", {
                    Color = Settings.Visuals.SelfESP.HealthBarGlowColor,
                    Thickness = 1,
                    Transparency = 1 - (Settings.Visuals.SelfESP.GlowIntensity / 100),
                    Parent = fill
                })
            else
                local stroke = fill:FindFirstChildOfClass("UIStroke")
                if stroke then stroke:Destroy() end
            end
        end
    end
end)

local selfHealthBarGlowColor, getSelfHealthBarGlowColor = createColorPicker(espSection2, "Health Glow Color", Settings.Visuals.SelfESP.HealthBarGlowColor, function(value)
    Settings.Visuals.SelfESP.HealthBarGlowColor = value
    if ESPObjects[player] and ESPObjects[player].healthBar then
        local fill = ESPObjects[player].healthBar:FindFirstChild("Frame"):FindFirstChild("Frame")
        if fill then
            local stroke = fill:FindFirstChildOfClass("UIStroke")
            if stroke then
                stroke.Color = value
            end
        end
    end
end)

local selfToolESPToggle, getSelfToolESP = createToggle(espSection2, "Tool ESP", Settings.Visuals.SelfESP.ToolESP, function(value)
    Settings.Visuals.SelfESP.ToolESP = value
    if ESPObjects[player] and ESPObjects[player].tool then
        ESPObjects[player].tool.Visible = value and Settings.Visuals.SelfESP.Enable
    end
end)

local selfToolESPColor, getSelfToolESPColor = createColorPicker(espSection2, "Tool Color", Settings.Visuals.SelfESP.ToolESPColor, function(value)
    Settings.Visuals.SelfESP.ToolESPColor = value
    if ESPObjects[player] and ESPObjects[player].tool then
        ESPObjects[player].tool.TextColor3 = value
    end
end)

local selfToolOutlineToggle, getSelfToolOutline = createToggle(espSection2, "Text Outline", Settings.Visuals.SelfESP.ToolOutline, function(value)
    Settings.Visuals.SelfESP.ToolOutline = value
    if ESPObjects[player] and ESPObjects[player].tool then
        if value then
            create("UIStroke", {
                Color = Color3.new(0, 0, 0),
                Thickness = 2,
                Parent = ESPObjects[player].tool
            })
        else
            local stroke = ESPObjects[player].tool:FindFirstChildOfClass("UIStroke")
            if stroke then stroke:Destroy() end
        end
    end
end)

local selfToolGlowToggle, getSelfToolGlow = createToggle(espSection2, "Tool Glow", Settings.Visuals.SelfESP.ToolGlow, function(value)
    Settings.Visuals.SelfESP.ToolGlow = value
    if ESPObjects[player] and ESPObjects[player].tool then
        if value then
            create("UIGradient", {
                Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, Settings.Visuals.SelfESP.ToolGlowColor),
                    ColorSequenceKeypoint.new(1, Settings.Visuals.SelfESP.ToolESPColor)
                },
                Rotation = 90,
                Parent = ESPObjects[player].tool
            })
        else
            local gradient = ESPObjects[player].tool:FindFirstChildOfClass("UIGradient")
            if gradient then gradient:Destroy() end
        end
    end
end)

local selfToolGlowColor, getSelfToolGlowColor = createColorPicker(espSection2, "Tool Glow Color", Settings.Visuals.SelfESP.ToolGlowColor, function(value)
    Settings.Visuals.SelfESP.ToolGlowColor = value
    if ESPObjects[player] and ESPObjects[player].tool then
        local gradient = ESPObjects[player].tool:FindFirstChildOfClass("UIGradient")
        if gradient then
            gradient.Color = ColorSequence.new{
                ColorSequenceKeypoint.new(0, value),
                ColorSequenceKeypoint.new(1, Settings.Visuals.SelfESP.ToolESPColor)
            }
        end
    end
end)

local selfDistanceESPToggle, getSelfDistanceESP = createToggle(espSection2, "Distance ESP", Settings.Visuals.SelfESP.DistanceESP, function(value)
    Settings.Visuals.SelfESP.DistanceESP = value
    if ESPObjects[player] and ESPObjects[player].distance then
        ESPObjects[player].distance.Visible = value and Settings.Visuals.SelfESP.Enable
    end
end)

local selfDistanceESPColor, getSelfDistanceESPColor = createColorPicker(espSection2, "Distance Color", Settings.Visuals.SelfESP.DistanceESPColor, function(value)
    Settings.Visuals.SelfESP.DistanceESPColor = value
    if ESPObjects[player] and ESPObjects[player].distance then
        ESPObjects[player].distance.TextColor3 = value
    end
end)

local selfDistanceOutlineToggle, getSelfDistanceOutline = createToggle(espSection2, "Text Outline", Settings.Visuals.SelfESP.DistanceOutline, function(value)
    Settings.Visuals.SelfESP.DistanceOutline = value
    if ESPObjects[player] and ESPObjects[player].distance then
        if value then
            create("UIStroke", {
                Color = Color3.new(0, 0, 0),
                Thickness = 2,
                Parent = ESPObjects[player].distance
            })
        else
            local stroke = ESPObjects[player].distance:FindFirstChildOfClass("UIStroke")
            if stroke then stroke:Destroy() end
        end
    end
end)

local selfDistanceGlowToggle, getSelfDistanceGlow = createToggle(espSection2, "Distance Glow", Settings.Visuals.SelfESP.DistanceGlow, function(value)
    Settings.Visuals.SelfESP.DistanceGlow = value
    if ESPObjects[player] and ESPObjects[player].distance then
        if value then
            create("UIGradient", {
                Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, Settings.Visuals.SelfESP.DistanceGlowColor),
                    ColorSequenceKeypoint.new(1, Settings.Visuals.SelfESP.DistanceESPColor)
                },
                Rotation = 90,
                Parent = ESPObjects[player].distance
            })
        else
            local gradient = ESPObjects[player].distance:FindFirstChildOfClass("UIGradient")
            if gradient then gradient:Destroy() end
        end
    end
end)

local selfDistanceGlowColor, getSelfDistanceGlowColor = createColorPicker(espSection2, "Distance Glow Color", Settings.Visuals.SelfESP.DistanceGlowColor, function(value)
    Settings.Visuals.SelfESP.DistanceGlowColor = value
    if ESPObjects[player] and ESPObjects[player].distance then
        local gradient = ESPObjects[player].distance:FindFirstChildOfClass("UIGradient")
        if gradient then
            gradient.Color = ColorSequence.new{
                ColorSequenceKeypoint.new(0, value),
                ColorSequenceKeypoint.new(1, Settings.Visuals.SelfESP.DistanceESPColor)
            }
        end
    end
end)

local selfChamsESPToggle, getSelfChamsESP = createToggle(espSection2, "Chams ESP", Settings.Visuals.SelfESP.ChamsESP, function(value)
    Settings.Visuals.SelfESP.ChamsESP = value
    if ESPObjects[player] and ESPObjects[player].chams then
        for _, cham in pairs(ESPObjects[player].chams) do
            cham.Visible = value and Settings.Visuals.SelfESP.Enable
        end
    end
end)

local selfChamsESPColor, getSelfChamsESPColor = createColorPicker(espSection2, "Chams Color", Settings.Visuals.SelfESP.ChamsESPColor, function(value)
    Settings.Visuals.SelfESP.ChamsESPColor = value
    if ESPObjects[player] and ESPObjects[player].chams then
        for _, cham in pairs(ESPObjects[player].chams) do
            cham.Color3 = value
        end
    end
end)

local selfChamsGlowToggle, getSelfChamsGlow = createToggle(espSection2, "Chams Glow", Settings.Visuals.SelfESP.ChamsGlow, function(value)
    Settings.Visuals.SelfESP.ChamsGlow = value
    if ESPObjects[player] and ESPObjects[player].chams then
        for _, cham in pairs(ESPObjects[player].chams) do
            if value then
                create("UIGradient", {
                    Color = ColorSequence.new{
                        ColorSequenceKeypoint.new(0, Settings.Visuals.SelfESP.ChamsGlowColor),
                        ColorSequenceKeypoint.new(1, Settings.Visuals.SelfESP.ChamsESPColor)
                    },
                    Rotation = 90,
                    Parent = cham
                })
            else
                local gradient = cham:FindFirstChildOfClass("UIGradient")
                if gradient then gradient:Destroy() end
            end
        end
    end
end)

local selfChamsGlowColor, getSelfChamsGlowColor = createColorPicker(espSection2, "Chams Glow Color", Settings.Visuals.SelfESP.ChamsGlowColor, function(value)
    Settings.Visuals.SelfESP.ChamsGlowColor = value
    if ESPObjects[player] and ESPObjects[player].chams then
        for _, cham in pairs(ESPObjects[player].chams) do
            local gradient = cham:FindFirstChildOfClass("UIGradient")
            if gradient then
                gradient.Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, value),
                    ColorSequenceKeypoint.new(1, Settings.Visuals.SelfESP.ChamsESPColor)
                }
            end
        end
    end
end)

-- Self ESP Other Section
local selfGlowIntensitySlider, getSelfGlowIntensity = createSlider(espSection2, "Glow Intensity", 0, 100, Settings.Visuals.SelfESP.GlowIntensity, function(value)
    Settings.Visuals.SelfESP.GlowIntensity = value
    if ESPObjects[player] then
        if ESPObjects[player].box and ESPObjects[player].box:FindFirstChild("Frame") then
            local stroke = ESPObjects[player].box:FindFirstChild("Frame"):FindFirstChildOfClass("UIStroke")
            if stroke then
                stroke.Transparency = 1 - (value / 100)
            end
        end
        if ESPObjects[player].healthBar then
            local fill = ESPObjects[player].healthBar:FindFirstChild("Frame"):FindFirstChild("Frame")
            if fill then
                local stroke = fill:FindFirstChildOfClass("UIStroke")
                if stroke then
                    stroke.Transparency = 1 - (value / 100)
                end
            end
        end
    end
end)

local selfESPDistanceSlider, getSelfESPDistance = createSlider(espSection2, "ESP Distance", 10, 5000, Settings.Visuals.SelfESP.Distance, function(value)
    Settings.Visuals.SelfESP.Distance = value
end)

local selfHealthNumberToggle, getSelfHealthNumber = createToggle(espSection2, "Health Number", Settings.Visuals.SelfESP.HealthNumber, function(value)
    Settings.Visuals.SelfESP.HealthNumber = value
    if ESPObjects[player] then
        if value then
            if not ESPObjects[player].healthText and ESPObjects[player].healthBar then
                ESPObjects[player].healthText = create("TextLabel", {
                    BackgroundTransparency = 1,
                    Size = UDim2.new(0, 30, 0, 20),
                    Position = UDim2.new(0, -15, 1 - (player.Character.Humanoid.Health / player.Character.Humanoid.MaxHealth), -10),
                    Font = Theme.Font,
                    Text = math.floor(player.Character.Humanoid.Health),
                    TextColor3 = Settings.Visuals.SelfESP.HealthNumberColor,
                    TextSize = 12,
                    TextStrokeTransparency = 0,
                    Parent = ESPObjects[player].healthBar
                })
            elseif ESPObjects[player].healthText then
                ESPObjects[player].healthText.Visible = value and Settings.Visuals.SelfESP.Enable
            end
        elseif ESPObjects[player].healthText then
            ESPObjects[player].healthText.Visible = false
        end
    end
end)

local selfHealthNumberColor, getSelfHealthNumberColor = createColorPicker(espSection2, "Health Number Color", Settings.Visuals.SelfESP.HealthNumberColor, function(value)
    Settings.Visuals.SelfESP.HealthNumberColor = value
    if ESPObjects[player] and ESPObjects[player].healthText then
        ESPObjects[player].healthText.TextColor3 = value
    end
end)

-- World Subtab
local worldSection1 = createSection(visualsSubTabs[2].page, "World 1", UDim2.new(0, 5, 0, 5), UDim2.new(1, -10, 0, 150))
local worldSection2 = createSection(visualsSubTabs[2].page, "World 2", UDim2.new(0, 5, 0, 160), UDim2.new(1, -10, 0, 120))

-- World 1 Section
local ambienceToggle, getAmbience = createToggle(worldSection1, "Ambience Color", Settings.Visuals.World.AmbienceColor, function(value)
    Settings.Visuals.World.AmbienceColor = value
    updateWorldVisuals()
end)

local ambienceColor, getAmbienceColor = createColorPicker(worldSection1, "Ambience Color", Settings.Visuals.World.AmbienceColorValue, function(value)
    Settings.Visuals.World.AmbienceColorValue = value
    if Settings.Visuals.World.AmbienceColor then
        updateWorldVisuals()
    end
end)

local buildingToggle, getBuilding = createToggle(worldSection1, "Building Color", Settings.Visuals.World.BuildingColor, function(value)
    Settings.Visuals.World.BuildingColor = value
    updateWorldVisuals()
end)

local buildingColor, getBuildingColor = createColorPicker(worldSection1, "Building Color", Settings.Visuals.World.BuildingColorValue, function(value)
    Settings.Visuals.World.BuildingColorValue = value
    if Settings.Visuals.World.BuildingColor then
        updateWorldVisuals()
    end
end)

local fogToggle, getFog = createToggle(worldSection1, "Fog Color", Settings.Visuals.World.FogColor, function(value)
    Settings.Visuals.World.FogColor = value
    updateWorldVisuals()
end)

local fogColor, getFogColor = createColorPicker(worldSection1, "Fog Color", Settings.Visuals.World.FogColorValue, function(value)
    Settings.Visuals.World.FogColorValue = value
    if Settings.Visuals.World.FogColor then
        updateWorldVisuals()
    end
end)

local fogStartSlider, getFogStart = createSlider(worldSection1, "Fog Start", 0, 1000, Settings.Visuals.World.FogStart, function(value)
    Settings.Visuals.World.FogStart = value
    if Settings.Visuals.World.FogColor then
        updateWorldVisuals()
    end
end)

local fogEndSlider, getFogEnd = createSlider(worldSection1, "Fog End", 0, 10000, Settings.Visuals.World.FogEnd, function(value)
    Settings.Visuals.World.FogEnd = value
    if Settings.Visuals.World.FogColor then
        updateWorldVisuals()
    end
end)

local screenToggle, getScreen = createToggle(worldSection1, "Screen Color Overlay", Settings.Visuals.World.ScreenColor, function(value)
    Settings.Visuals.World.ScreenColor = value
    updateWorldVisuals()
end)

local screenColor, getScreenColor = createColorPicker(worldSection1, "Screen Color", Settings.Visuals.World.ScreenColorValue, function(value)
    Settings.Visuals.World.ScreenColorValue = value
    if Settings.Visuals.World.ScreenColor then
        updateWorldVisuals()
    end
end)

-- World 2 Section
local ambienceGlowToggle, getAmbienceGlow = createToggle(worldSection2, "Ambience Glow", Settings.Visuals.World.AmbienceGlow, function(value)
    Settings.Visuals.World.AmbienceGlow = value
    updateWorldVisuals()
end)

local ambienceGlowColor, getAmbienceGlowColor = createColorPicker(worldSection2, "Ambience Glow Color", Settings.Visuals.World.AmbienceGlowColor, function(value)
    Settings.Visuals.World.AmbienceGlowColor = value
    if Settings.Visuals.World.AmbienceGlow then
        updateWorldVisuals()
    end
end)

local buildingGlowToggle, getBuildingGlow = createToggle(worldSection2, "Building Glow", Settings.Visuals.World.BuildingGlow, function(value)
    Settings.Visuals.World.BuildingGlow = value
    updateWorldVisuals()
end)

local buildingGlowColor, getBuildingGlowColor = createColorPicker(worldSection2, "Building Glow Color", Settings.Visuals.World.BuildingGlowColor, function(value)
    Settings.Visuals.World.BuildingGlowColor = value
    if Settings.Visuals.World.BuildingGlow then
        updateWorldVisuals()
    end
end)

local fogGlowToggle, getFogGlow = createToggle(worldSection2, "Fog Glow", Settings.Visuals.World.FogGlow, function(value)
    Settings.Visuals.World.FogGlow = value
    updateWorldVisuals()
end)

local fogGlowColor, getFogGlowColor = createColorPicker(worldSection2, "Fog Glow Color", Settings.Visuals.World.FogGlowColor, function(value)
    Settings.Visuals.World.FogGlowColor = value
    if Settings.Visuals.World.FogGlow then
        updateWorldVisuals()
    end
end)

-- Effects Subtab
local effectsSection1 = createSection(visualsSubTabs[3].page, "Effects", UDim2.new(0, 5, 0, 5), UDim2.new(1, -10, 0, 300))

-- Effects Section
local snowToggle, getSnow = createToggle(effectsSection1, "Snow Flakes", Settings.Visuals.Effects.SnowFlakes, function(value)
    Settings.Visuals.Effects.SnowFlakes = value
    createSnowFlakes()
end)

local kittyToggle, getKitty = createToggle(effectsSection1, "Hello Kitty", Settings.Visuals.Effects.HelloKitty, function(value)
    Settings.Visuals.Effects.HelloKitty = value
    createHelloKitties()
end)

local selfBulletTracerToggle, getSelfBulletTracer = createToggle(effectsSection1, "Self Bullet Tracer", Settings.Visuals.Effects.SelfBulletTracer, function(value)
    Settings.Visuals.Effects.SelfBulletTracer = value
    createBulletTracers()
end)

local selfBulletTracerColor, getSelfBulletTracerColor = createColorPicker(effectsSection1, "Self Tracer Color", Settings.Visuals.Effects.SelfBulletTracerColor, function(value)
    Settings.Visuals.Effects.SelfBulletTracerColor = value
end)

local enemyBulletTracerToggle, getEnemyBulletTracer = createToggle(effectsSection1, "Enemy Bullet Tracer", Settings.Visuals.Effects.EnemyBulletTracer, function(value)
    Settings.Visuals.Effects.EnemyBulletTracer = value
    createBulletTracers()
end)

local enemyBulletTracerColor, getEnemyBulletTracerColor = createColorPicker(effectsSection1, "Enemy Tracer Color", Settings.Visuals.Effects.EnemyBulletTracerColor, function(value)
    Settings.Visuals.Effects.EnemyBulletTracerColor = value
end)

local bulletStartSlider, getBulletStartSize = createSlider(effectsSection1, "Bullet Start Size", 0.1, 5, Settings.Visuals.Effects.BulletStartSize, function(value)
    Settings.Visuals.Effects.BulletStartSize = value
end)

local bulletEndSlider, getBulletEndSize = createSlider(effectsSection1, "Bullet End Size", 0.1, 5, Settings.Visuals.Effects.BulletEndSize, function(value)
    Settings.Visuals.Effects.BulletEndSize = value
end)

local bulletDurationSlider, getBulletDuration = createSlider(effectsSection1, "Bullet Duration", 0.1, 5, Settings.Visuals.Effects.BulletDuration, function(value)
    Settings.Visuals.Effects.BulletDuration = value
end)

local hitSkeletonToggle, getHitSkeleton = createToggle(effectsSection1, "Hit Skeleton", Settings.Visuals.Effects.HitSkeleton, function(value)
    Settings.Visuals.Effects.HitSkeleton = value
    createHitSkeleton()
end)

local hitSkeletonColor, getHitSkeletonColor = createColorPicker(effectsSection1, "Skeleton Color", Settings.Visuals.Effects.HitSkeletonColor, function(value)
    Settings.Visuals.Effects.HitSkeletonColor = value
end)

local hitSkeletonGlowToggle, getHitSkeletonGlow = createToggle(effectsSection1, "Skeleton Glow", Settings.Visuals.Effects.HitSkeletonGlow, function(value)
    Settings.Visuals.Effects.HitSkeletonGlow = value
end)

local hitSkeletonGlowColor, getHitSkeletonGlowColor = createColorPicker(effectsSection1, "Skeleton Glow Color", Settings.Visuals.Effects.HitSkeletonGlowColor, function(value)
    Settings.Visuals.Effects.HitSkeletonGlowColor = value
end)

local crosshairToggle, getCrosshair = createToggle(effectsSection1, "Crosshair", Settings.Visuals.Effects.Crosshair, function(value)
    Settings.Visuals.Effects.Crosshair = value
    createCrosshair()
end)

local crosshairColor, getCrosshairColor = createColorPicker(effectsSection1, "Crosshair Color", Settings.Visuals.Effects.CrosshairColor, function(value)
    Settings.Visuals.Effects.CrosshairColor = value
    if Crosshair then
        for _, child in pairs(Crosshair:GetChildren()) do
            if child:IsA("Frame") then
                child.BackgroundColor3 = value
            end
        end
    end
end)

local crosshairOutlineToggle, getCrosshairOutline = createToggle(effectsSection1, "Crosshair Outline", Settings.Visuals.Effects.CrosshairOutline, function(value)
    Settings.Visuals.Effects.CrosshairOutline = value
    createCrosshair()
end)

local crosshairOutlineColor, getCrosshairOutlineColor = createColorPicker(effectsSection1, "Outline Color", Settings.Visuals.Effects.CrosshairOutlineColor, function(value)
    Settings.Visuals.Effects.CrosshairOutlineColor = value
    if Crosshair then
        for _, child in pairs(Crosshair:GetChildren()) do
            if child:IsA("Frame") then
                local stroke = child:FindFirstChildOfClass("UIStroke")
                if stroke then
                    stroke.Color = value
                end
            end
        end
    end
end)

local crosshairGapSlider, getCrosshairGap = createSlider(effectsSection1, "Crosshair Gap", 0, 20, Settings.Visuals.Effects.CrosshairGap, function(value)
    Settings.Visuals.Effects.CrosshairGap = value
    createCrosshair()
end)

local crosshairSizeSlider, getCrosshairSize = createSlider(effectsSection1, "Crosshair Size", 1, 30, Settings.Visuals.Effects.CrosshairSize, function(value)
    Settings.Visuals.Effects.CrosshairSize = value
    createCrosshair()
end)

local crosshairSpinToggle, getCrosshairSpin = createToggle(effectsSection1, "Crosshair Spin", Settings.Visuals.Effects.CrosshairSpin, function(value)
    Settings.Visuals.Effects.CrosshairSpin = value
    createCrosshair()
end)

local crosshairSpinSlider, getCrosshairSpinSpeed = createSlider(effectsSection1, "Spin Speed", 1, 20, Settings.Visuals.Effects.CrosshairSpinSpeed, function(value)
    Settings.Visuals.Effects.CrosshairSpinSpeed = value
end)

-- CREATE MISC TAB
local miscTab = tabPages[3].page
local miscSubTabs = createSubTabs(miscTab, {"Self Misc", "Players"})

-- Self Misc Subtab
local selfMiscSection1 = createSection(miscSubTabs[1].page, "Fly", UDim2.new(0, 5, 0, 5), UDim2.new(1, -10, 0, 100))
local selfMiscSection2 = createSection(miscSubTabs[1].page, "Speed", UDim2.new(0, 5, 0, 110), UDim2.new(1, -10, 0, 150))
local selfMiscSection3 = createSection(miscSubTabs[1].page, "Anti Aim", UDim2.new(0, 5, 0, 265), UDim2.new(1, -10, 0, 100))

-- Fly Section
local flyToggle, getFlyEnabled, setFlyEnabled = createToggleWithHotkey(selfMiscSection1, "Enable Fly", Settings.Misc.Fly.Enable, function(value)
    Settings.Misc.Fly.Enable = value
end)

local flySpeedSlider, getFlySpeed = createSlider(selfMiscSection1, "Fly Speed", 1, 100, Settings.Misc.Fly.Speed, function(value)
    Settings.Misc.Fly.Speed = value
end)

local flyTypeDropdown, getFlyType = createDropdown(selfMiscSection1, "Fly Type", {"Normal", "Momentum"}, Settings.Misc.Fly.Type, function(value)
    Settings.Misc.Fly.Type = value
end)

-- Speed Section
local speedToggle, getSpeedEnabled, setSpeedEnabled = createToggleWithHotkey(selfMiscSection2, "Enable Speed", Settings.Misc.Speed.Enable, function(value)
    Settings.Misc.Speed.Enable = value
    if not value and player.Character then
        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = 16
        end
    end
end)

local speedAmountSlider, getSpeedAmount = createSlider(selfMiscSection2, "Speed Amount", 1, 100, Settings.Misc.Speed.Amount, function(value)
    Settings.Misc.Speed.Amount = value
end)

local speedTypeDropdown, getSpeedType = createDropdown(selfMiscSection2, "Speed Type", {"Legit", "Unlegit"}, Settings.Misc.Speed.Type, function(value)
    Settings.Misc.Speed.Type = value
end)

local legitSlideSlider, getLegitSlideAmount = createSlider(selfMiscSection2, "Legit Slide Amount", 1, 30, Settings.Misc.Speed.LegitSlideAmount, function(value)
    Settings.Misc.Speed.LegitSlideAmount = value
end)

-- Anti Aim Section (placeholder)
local antiAimText = create("TextLabel", {
    BackgroundTransparency = 1,
    Size = UDim2.new(1, 0, 1, 0),
    Font = Theme.Font,
    Text = "Anti Aim features coming soon",
    TextColor3 = Theme.PrimaryText,
    TextSize = 12,
    TextStrokeTransparency = 0,
    Parent = selfMiscSection3
})

-- Players Subtab
local playersSection1 = createSection(miscSubTabs[2].page, "Players", UDim2.new(0, 5, 0, 5), UDim2.new(1, -10, 1, -80))

-- Players List
local playersList = create("ScrollingFrame", {
    BackgroundTransparency = 1,
    Size = UDim2.new(1, 0, 1, -40),
    Position = UDim2.new(0, 0, 0, 0),
    CanvasSize = UDim2.new(0, 0, 0, 0),
    ScrollBarThickness = 4,
    Parent = playersSection1
})

create("UIListLayout", {
    FillDirection = Enum.FillDirection.Vertical,
    Padding = UDim.new(0, 5),
    Parent = playersList
})

local function updatePlayersList()
    playersList:ClearAllChildren()
    
    for _, target in pairs(Players:GetPlayers()) do
        if target ~= player then
            local playerButton = create("Frame", {
                BackgroundColor3 = Theme.ButtonColor,
                BorderColor3 = Color3.fromRGB(12, 12, 12),
                BorderMode = "Inset",
                BorderSizePixel = 1,
                Size = UDim2.new(1, 0, 0, 30),
                Parent = playersList
            })
            
            local playerOutline = create("Frame", {
                BackgroundColor3 = Theme.ButtonColor,
                BorderColor3 = Theme.BorderColor,
                BorderMode = "Inset",
                BorderSizePixel = 1,
                Size = UDim2.new(1, 0, 1, 0),
                Parent = playerButton
            })
            
            local playerLabel = create("TextLabel", {
                BackgroundTransparency = 1,
                Size = UDim2.new(1, -120, 1, 0),
                Position = UDim2.new(0, 5, 0, 0),
                Font = Theme.Font,
                Text = target.Name,
                TextColor3 = Theme.PrimaryText,
                TextSize = 12,
                TextStrokeTransparency = 0,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = playerOutline
            })
            
            local spectateButton = create("TextButton", {
                BackgroundColor3 = Theme.AccentColor,
                BorderColor3 = Color3.fromRGB(12, 12, 12),
                BorderMode = "Inset",
                BorderSizePixel = 1,
                Size = UDim2.new(0, 30, 0, 20),
                Position = UDim2.new(1, -110, 0.5, -10),
                Text = "S",
                TextColor3 = Theme.PrimaryText,
                TextSize = 12,
                Font = Theme.Font,
                Parent = playerOutline
            })
            
            local teleportButton = create("TextButton", {
                BackgroundColor3 = Theme.AccentColor,
                BorderColor3 = Color3.fromRGB(12, 12, 12),
                BorderMode = "Inset",
                BorderSizePixel = 1,
                Size = UDim2.new(0, 30, 0, 20),
                Position = UDim2.new(1, -75, 0.5, -10),
                Text = "T",
                TextColor3 = Theme.PrimaryText,
                TextSize = 12,
                Font = Theme.Font,
                Parent = playerOutline
            })
            
            local flingButton = create("TextButton", {
                BackgroundColor3 = Theme.AccentColor,
                BorderColor3 = Color3.fromRGB(12, 12, 12),
                BorderMode = "Inset",
                BorderSizePixel = 1,
                Size = UDim2.new(0, 30, 0, 20),
                Position = UDim2.new(1, -40, 0.5, -10),
                Text = "F",
                TextColor3 = Theme.PrimaryText,
                TextSize = 12,
                Font = Theme.Font,
                Parent = playerOutline
            })
            
            spectateButton.MouseButton1Down:Connect(function()
                Settings.Misc.Players.Spectate = target
                if target.Character then
                    camera.CameraSubject = target.Character:FindFirstChildOfClass("Humanoid")
                end
            end)
            
            teleportButton.MouseButton1Down:Connect(function()
                Settings.Misc.Players.Teleport = target
                teleportToPlayer(target)
            end)
            
            flingButton.MouseButton1Down:Connect(function()
                Settings.Misc.Players.Fling = target
                flingPlayer(target)
            end)
        end
    end
end

-- Update players list initially and when players join/leave
updatePlayersList()
Players.PlayerAdded:Connect(updatePlayersList)
Players.PlayerRemoving:Connect(updatePlayersList)

-- CREATE SETTINGS TAB
local settingsTab = tabPages[4].page
local settingsSection1 = createSection(settingsTab, "UI", UDim2.new(0, 5, 0, 5), UDim2.new(1, -10, 0, 200))
local settingsSection2 = createSection(settingsTab, "Config", UDim2.new(0, 5, 0, 210), UDim2.new(1, -10, 0, 200))

-- UI Section
local fontDropdown, getFont = createDropdown(settingsSection1, "Font", {"GothamSemibold", "SourceSans", "Arial", "Code"}, Theme.Font.Name, function(value)
    Theme.Font = Enum.Font[value]
    updateUI()
end)

local bgTransSlider, getBGTrans = createSlider(settingsSection1, "Background Transparency", 0, 100, Settings.UI.BackgroundTransparency * 100, function(value)
    Settings.UI.BackgroundTransparency = value / 100
    updateUI()
end)

local watermarkToggle, getWatermark = createToggle(settingsSection1, "Show Watermark", Settings.ShowWatermark, function(value)
    Settings.ShowWatermark = value
    watermark.Visible = value
end)

local notifToggle, getNotif = createToggle(settingsSection1, "Show Notifications", Settings.ShowNotifications, function(value)
    Settings.ShowNotifications = value
end)

-- Config Section
local configList = create("ScrollingFrame", {
    BackgroundColor3 = Theme.ButtonColor,
    BorderColor3 = Color3.fromRGB(12, 12, 12),
    BorderMode = "Inset",
    BorderSizePixel = 1,
    Size = UDim2.new(1, 0, 0, 100),
    Position = UDim2.new(0, 0, 0, 25),
    CanvasSize = UDim2.new(0, 0, 0, 0),
    ScrollBarThickness = 4,
    Parent = settingsSection2
})

create("UIListLayout", {
    FillDirection = Enum.FillDirection.Vertical,
    Parent = configList
})

local function updateConfigList()
    configList:ClearAllChildren()
    
    for _, configName in pairs(Settings.Config.List) do
        local configButton = create
		        local configButton = create("Frame", {
            BackgroundColor3 = Theme.ButtonColor,
            BorderColor3 = Color3.fromRGB(12, 12, 12),
            BorderMode = "Inset",
            BorderSizePixel = 1,
            Size = UDim2.new(1, 0, 0, 25),
            Parent = configList
        })
        
        local configLabel = create("TextLabel", {
            BackgroundTransparency = 1,
            Size = UDim2.new(1, -60, 1, 0),
            Position = UDim2.new(0, 5, 0, 0),
            Font = Theme.Font,
            Text = configName,
            TextColor3 = Theme.PrimaryText,
            TextSize = 12,
            TextStrokeTransparency = 0,
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = configButton
        })
        
        local loadButton = create("TextButton", {
            BackgroundColor3 = Theme.AccentColor,
            BorderColor3 = Color3.fromRGB(12, 12, 12),
            BorderMode = "Inset",
            BorderSizePixel = 1,
            Size = UDim2.new(0, 25, 0, 20),
            Position = UDim2.new(1, -55, 0.5, -10),
            Text = "L",
            TextColor3 = Theme.PrimaryText,
            TextSize = 12,
            Font = Theme.Font,
            Parent = configButton
        })
        
        local deleteButton = create("TextButton", {
            BackgroundColor3 = Color3.fromRGB(255, 50, 50),
            BorderColor3 = Color3.fromRGB(12, 12, 12),
            BorderMode = "Inset",
            BorderSizePixel = 1,
            Size = UDim2.new(0, 25, 0, 20),
            Position = UDim2.new(1, -25, 0.5, -10),
            Text = "D",
            TextColor3 = Theme.PrimaryText,
            TextSize = 12,
            Font = Theme.Font,
            Parent = configButton
        })
        
        loadButton.MouseButton1Down:Connect(function()
            loadConfig(configName)
        end)
        
        deleteButton.MouseButton1Down:Connect(function()
            deleteConfig(configName)
            updateConfigList()
        end)
    end
end

local configNameInput = create("TextBox", {
    BackgroundColor3 = Theme.ButtonColor,
    BorderColor3 = Color3.fromRGB(12, 12, 12),
    BorderMode = "Inset",
    BorderSizePixel = 1,
    Size = UDim2.new(1, -60, 0, 25),
    Position = UDim2.new(0, 0, 0, 0),
    Font = Theme.Font,
    Text = "Config Name",
    PlaceholderText = "Enter config name",
    TextColor3 = Theme.PrimaryText,
    TextSize = 12,
    TextStrokeTransparency = 0,
    Parent = settingsSection2
})

local saveButton = create("TextButton", {
    BackgroundColor3 = Theme.AccentColor,
    BorderColor3 = Color3.fromRGB(12, 12, 12),
    BorderMode = "Inset",
    BorderSizePixel = 1,
    Size = UDim2.new(0, 50, 0, 25),
    Position = UDim2.new(1, -55, 0, 0),
    Text = "Save",
    TextColor3 = Theme.PrimaryText,
    TextSize = 12,
    Font = Theme.Font,
    Parent = settingsSection2
})

saveButton.MouseButton1Down:Connect(function()
    if configNameInput.Text ~= "" then
        saveConfig(configNameInput.Text)
        updateConfigList()
    end
end)

-- Update config list initially
updateConfigList()

-- MAIN LOOP
RunService.Heartbeat:Connect(function(delta)
    -- Update FPS counter in watermark
    fps = math.floor(1 / delta)
    if watermark and watermarkText then
        watermarkText.Text = "example.lol | FPS: "..fps.." | "..player.Name
    end
    
    -- Aimbot functionality
    if Settings.Combat.Enable and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        currentTarget = getClosestPlayer()
        if currentTarget and currentTarget.Character and currentTarget.Character:FindFirstChild(Settings.Combat.HitPart) then
            aimAt(currentTarget.Character[Settings.Combat.HitPart])
        end
    end
    
    -- Silent Aim functionality would be implemented via hooks/method replacements
    
    -- Orbit Lock functionality
    if Settings.Combat.OrbitLock.Enable and lockedTarget then
        orbitLock(lockedTarget)
    end
    
    -- Fly functionality
    if Settings.Misc.Fly.Enable then
        fly()
    end
    
    -- Speed functionality
    if Settings.Misc.Speed.Enable and player.Character then
        speedBoost()
    end
    
    -- Anti Aim functionality
    if Settings.Misc.AntiAim.Enable then
        antiAim()
    end
end)

-- Initialize ESP for existing players
for _, player in pairs(Players:GetPlayers()) do
    if player ~= player then
        createESP(player)
    end
end

-- Create ESP for new players
Players.PlayerAdded:Connect(function(player)
    if player ~= player then
        createESP(player)
    end
end)

-- Create self ESP
createSelfESP()

-- Create FOV circles
createFOVCircle()
createSilentFOVCircle()

-- Create crosshair
createCrosshair()

-- Create effects
createSnowFlakes()
createHelloKitties()
createBulletTracers()
createHitSkeleton()

-- Initial UI update
updateUI()

-- Make main window draggable
makeDraggable(outline, titleBar)

-- Toggle GUI with key
UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.RightShift then
        screenGui.Enabled = not screenGui.Enabled
    end
end)

-- Send welcome notification
sendNotification("Welcome", "EnhancedPupyyware loaded successfully! Press RightShift to toggle GUI.", 5)
